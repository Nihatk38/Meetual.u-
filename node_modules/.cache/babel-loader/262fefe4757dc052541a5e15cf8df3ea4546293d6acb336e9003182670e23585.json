{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n  * vee-validate v4.11.8\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, toValue, ref, watch, nextTick, unref, isRef, reactive, onUnmounted, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, readonly, watchEffect, shallowRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\nfunction isObjectLike(value) {\n  return typeof value === 'object' && value !== null;\n}\nfunction getTag(value) {\n  if (value == null) {\n    return value === undefined ? '[object Undefined]' : '[object Null]';\n  }\n  return Object.prototype.toString.call(value);\n}\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\n    return false;\n  }\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n}\nfunction merge(target, source) {\n  Object.keys(source).forEach(key => {\n    if (isPlainObject(source[key])) {\n      if (!target[key]) {\n        target[key] = {};\n      }\n      merge(target[key], source[key]);\n      return;\n    }\n    target[key] = source[key];\n  });\n  return target;\n}\n/**\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\n */\nfunction normalizeFormPath(path) {\n  const pathArr = path.split('.');\n  if (!pathArr.length) {\n    return '';\n  }\n  let fullPath = String(pathArr[0]);\n  for (let i = 1; i < pathArr.length; i++) {\n    if (isIndex(pathArr[i])) {\n      fullPath += `[${pathArr[i]}]`;\n      continue;\n    }\n    fullPath += `.${pathArr[i]}`;\n  }\n  return fullPath;\n}\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n    k,\n    list,\n    tmp,\n    str = Object.prototype.toString.call(x);\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n  return tmp || x;\n}\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n  return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  }\n  // this is for IE and Cypress #3161\n  /* istanbul ignore next */\n  if (evt && evt.srcElement) {\n    return true;\n  }\n  return false;\n}\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false;\n    // eslint-disable-next-line no-var\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!isEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      for (i of a.entries()) if (!isEqual(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n    // We added this part for file comparison, arguably a little naive but should work for most cases.\n    // #3911\n    if (isFile(a) && isFile(b)) {\n      if (a.size !== b.size) return false;\n      if (a.name !== b.name) return false;\n      if (a.lastModified !== b.lastModified) return false;\n      if (a.type !== b.type) return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    for (i = length; i-- !== 0;) {\n      // eslint-disable-next-line no-var\n      var key = keys[i];\n      if (!isEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b;\n}\nfunction isFile(a) {\n  if (!isClient) {\n    return false;\n  }\n  return a instanceof File;\n}\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n  return path;\n}\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    }\n    // Key does not exist, create a container for it\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n    acc = acc[keys[i]];\n  }\n}\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    }\n    // Key does not exist, exit\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n    acc = acc[keys[i]];\n  }\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n  return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    // Use isEqual since checked object values can possibly fail the equality check #3883\n    const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n  return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n    return lastResult;\n  };\n}\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      clearTimeout(timer);\n    }\n    // @ts-expect-error timer is a number\n    timer = setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return value;\n  }\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n  return value;\n}\nfunction withLatest(fn, onDone) {\n  let latestRun;\n  return async function runLatest(...args) {\n    const pending = fn(...args);\n    latestRun = pending;\n    const result = await pending;\n    if (pending !== latestRun) {\n      return result;\n    }\n    latestRun = undefined;\n    onDone(result, args);\n    return result;\n  };\n}\nfunction computedDeep({\n  get,\n  set\n}) {\n  const baseRef = ref(klona(get()));\n  watch(get, newValue => {\n    if (isEqual(newValue, baseRef.value)) {\n      return;\n    }\n    baseRef.value = klona(newValue);\n  }, {\n    deep: true\n  });\n  watch(baseRef, newValue => {\n    if (isEqual(newValue, get())) {\n      return;\n    }\n    set(klona(newValue));\n  }, {\n    deep: true\n  });\n  return baseRef;\n}\nfunction normalizeErrorItem(message) {\n  return Array.isArray(message) ? message : message ? [message] : [];\n}\nfunction resolveFieldOrPathState(path) {\n  const form = injectWithSelf(FormContextKey);\n  const state = path ? computed(() => form === null || form === void 0 ? void 0 : form.getPathState(toValue(path))) : undefined;\n  const field = path ? undefined : inject(FieldContextKey);\n  if (!field && !(state === null || state === void 0 ? void 0 : state.value)) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`field with name ${toValue(path)} was not found`);\n    }\n  }\n  return state || field;\n}\nfunction omit(obj, keys) {\n  const target = {};\n  for (const key in obj) {\n    if (!keys.includes(key)) {\n      target[key] = obj[key];\n    }\n  }\n  return target;\n}\nfunction debounceNextTick(inner) {\n  let lastTick = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    const thisTick = nextTick(() => {\n      if (lastTick !== thisTick) {\n        return;\n      }\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n      lastTick = null;\n    });\n    lastTick = thisTick;\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\nfunction normalizeChildren(tag, context, slotProps) {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n  return {\n    default: () => {\n      var _a, _b;\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n  return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\nfunction parseInputValue(el) {\n  if (el.type === 'number') {\n    return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n  }\n  if (el.type === 'range') {\n    return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n  }\n  return el.value;\n}\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n  const input = value.target;\n  // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  }\n  // makes sure we get the actual `option` bound value\n  // #3440\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n  return parseInputValue(input);\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n  if (!rules) {\n    return acc;\n  }\n  // Object is already normalized, skip.\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n    if (!parsedRule.name) {\n      return prev;\n    }\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n  if (Array.isArray(params)) {\n    return params;\n  }\n  if (isObject(params)) {\n    return params;\n  }\n  return [params];\n}\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n    return value;\n  };\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  }\n  // #3073\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n  return {\n    name,\n    params\n  };\n};\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n  locator.__locatorRef = value;\n  return locator;\n}\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    label: options === null || options === void 0 ? void 0 : options.label,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n  if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n    return validateFieldWithTypedSchema(value, field.rules);\n  }\n  // if a generic function or chain of generic functions\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.label || field.name,\n      name: field.name,\n      label: field.label,\n      form: field.formData,\n      value\n    };\n    // Normalize the pipeline\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && !Array.isArray(result) && result;\n      if (isValid) {\n        continue;\n      }\n      if (Array.isArray(result)) {\n        errors.push(...result);\n      } else {\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n        errors.push(message);\n      }\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n    return {\n      errors\n    };\n  }\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n    if (result.error) {\n      errors.push(result.error);\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n  return {\n    errors\n  };\n}\nfunction isYupError(err) {\n  return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n  const schema = {\n    __type: 'VVTypedSchema',\n    async parse(values) {\n      var _a;\n      try {\n        const output = await yupSchema.validate(values, {\n          abortEarly: false\n        });\n        return {\n          output,\n          errors: []\n        };\n      } catch (err) {\n        // Yup errors have a name prop one them.\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n        if (!isYupError(err)) {\n          throw err;\n        }\n        if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n          return {\n            errors: [{\n              path: err.path,\n              errors: err.errors\n            }]\n          };\n        }\n        const errors = err.inner.reduce((acc, curr) => {\n          const path = curr.path || '';\n          if (!acc[path]) {\n            acc[path] = {\n              errors: [],\n              path\n            };\n          }\n          acc[path].errors.push(...curr.errors);\n          return acc;\n        }, {});\n        return {\n          errors: Object.values(errors)\n        };\n      }\n    }\n  };\n  return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const result = await typedSchema.parse(value);\n  const messages = [];\n  for (const error of result.errors) {\n    if (error.errors.length) {\n      messages.push(...error.errors);\n    }\n  }\n  return {\n    errors: messages\n  };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.label || field.name,\n    name: field.name,\n    label: field.label,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n  if (!message) {\n    return 'Field is invalid';\n  }\n  return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n    return value;\n  };\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\nasync function validateTypedSchema(schema, values) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const validationResult = await typedSchema.parse(klona(values));\n  const results = {};\n  const errors = {};\n  for (const error of validationResult.errors) {\n    const messages = error.errors;\n    // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n    const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n      return `[${m}]`;\n    });\n    results[path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n    if (messages.length) {\n      errors[path] = messages[0];\n    }\n  }\n  return {\n    valid: !validationResult.errors.length,\n    results,\n    errors,\n    values: validationResult.value\n  };\n}\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n    const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n      label: strings === null || strings === void 0 ? void 0 : strings.label,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, init.form);\n  if (!init.form) {\n    const {\n      errors,\n      setErrors\n    } = createFieldErrors();\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n    const meta = createFieldMeta(value, initialValue, errors);\n    function setState(state) {\n      var _a;\n      if ('value' in state) {\n        value.value = state.value;\n      }\n      if ('errors' in state) {\n        setErrors(state.errors);\n      }\n      if ('touched' in state) {\n        meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n      }\n      if ('initialValue' in state) {\n        setInitialValue(state.initialValue);\n      }\n    }\n    return {\n      id,\n      path,\n      value,\n      initialValue,\n      meta,\n      flags: {\n        pendingUnmount: {\n          [id]: false\n        },\n        pendingReset: false\n      },\n      errors,\n      setState\n    };\n  }\n  const state = init.form.createPathState(path, {\n    bails: init.bails,\n    label: init.label,\n    type: init.type,\n    validate: init.validate\n  });\n  const errors = computed(() => state.errors);\n  function setState(state) {\n    var _a, _b, _c;\n    if ('value' in state) {\n      value.value = state.value;\n    }\n    if ('errors' in state) {\n      (_a = init.form) === null || _a === void 0 ? void 0 : _a.setFieldError(unref(path), state.errors);\n    }\n    if ('touched' in state) {\n      (_b = init.form) === null || _b === void 0 ? void 0 : _b.setFieldTouched(unref(path), (_c = state.touched) !== null && _c !== void 0 ? _c : false);\n    }\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n  return {\n    id: Array.isArray(state.id) ? state.id[state.id.length - 1] : state.id,\n    path,\n    value,\n    errors,\n    meta: state,\n    initialValue,\n    flags: state.__flags,\n    setState\n  };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n  const modelRef = ref(unref(modelValue));\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n    return getFromPath(form.initialValues.value, unref(path), unref(modelRef));\n  }\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n    form.stageInitialValue(unref(path), value, true);\n  }\n  const initialValue = computed(resolveInitialValue);\n  // if no form is associated, use a regular ref.\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  }\n  // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n  const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n  form.stageInitialValue(unref(path), currentValue, true);\n  // otherwise use a computed setter that triggers the `setFieldValue`\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal, false);\n    }\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n  if (isRef(modelValue)) {\n    return unref(modelValue);\n  }\n  if (modelValue !== undefined) {\n    return modelValue;\n  }\n  return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction createFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !isEqual(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction createFieldErrors() {\n  const errors = ref([]);\n  return {\n    errors,\n    setErrors: messages => {\n      errors.value = normalizeErrorItem(messages);\n    }\n  };\n}\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if (SELECTED_NODE.type === 'field') {\n          await SELECTED_NODE.field.validate();\n          return;\n        }\n        if (SELECTED_NODE.type === 'form') {\n          await SELECTED_NODE.form.validate();\n          return;\n        }\n        if (SELECTED_NODE.type === 'pathState') {\n          await SELECTED_NODE.form.validateField(SELECTED_NODE.state.path);\n        }\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if (SELECTED_NODE.type === 'field') {\n          SELECTED_NODE.field.resetField();\n          return;\n        }\n        if (SELECTED_NODE.type === 'form') {\n          SELECTED_NODE.form.resetForm();\n        }\n        if (SELECTED_NODE.type === 'pathState') {\n          SELECTED_NODE.form.resetField(SELECTED_NODE.state.path);\n        }\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n    const {\n      form,\n      field,\n      state,\n      type\n    } = decodeNodeId(payload.nodeId);\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = {\n        type: 'form',\n        form\n      };\n      return;\n    }\n    if (state && type === 'pathState' && form) {\n      payload.state = buildFieldState(state);\n      SELECTED_NODE = {\n        type: 'pathState',\n        state,\n        form\n      };\n      return;\n    }\n    if (field && type === 'field') {\n      payload.state = buildFieldState({\n        errors: field.errors.value,\n        dirty: field.meta.dirty,\n        valid: field.meta.valid,\n        touched: field.meta.touched,\n        value: field.value.value,\n        initialValue: field.meta.initialValue\n      });\n      SELECTED_NODE = {\n        field,\n        type: 'field'\n      };\n      return;\n    }\n    SELECTED_NODE = null;\n  });\n}\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getValidityColors(form.meta.value.valid);\n  const formTreeNodes = {};\n  Object.values(form.getAllPathStates()).forEach(state => {\n    setInPath(formTreeNodes, unref(state.path), mapPathForDevtoolsInspector(state, form));\n  });\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${form.getAllPathStates().length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\nfunction mapPathForDevtoolsInspector(state, form) {\n  return {\n    id: encodeNodeId(form, state),\n    label: unref(state.path),\n    tags: getFieldNodeTags(state.multiple, state.fieldsCount, state.type, state.valid, form)\n  };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n  return {\n    id: encodeNodeId(form, field),\n    label: unref(field.name),\n    tags: getFieldNodeTags(false, 1, field.type, field.meta.valid, form)\n  };\n}\nfunction getFieldNodeTags(multiple, fieldsCount, type, valid, form) {\n  const {\n    textColor,\n    bgColor\n  } = getValidityColors(valid);\n  return [multiple ? undefined : {\n    label: 'Field',\n    textColor,\n    backgroundColor: bgColor\n  }, !form ? {\n    label: 'Standalone',\n    textColor: COLORS.black,\n    backgroundColor: COLORS.gray\n  } : undefined, type === 'checkbox' ? {\n    label: 'Checkbox',\n    textColor: COLORS.white,\n    backgroundColor: COLORS.blue\n  } : undefined, type === 'radio' ? {\n    label: 'Radio',\n    textColor: COLORS.white,\n    backgroundColor: COLORS.purple\n  } : undefined, multiple ? {\n    label: 'Multiple',\n    textColor: COLORS.black,\n    backgroundColor: COLORS.orange\n  } : undefined].filter(Boolean);\n}\nfunction encodeNodeId(form, stateOrField) {\n  const type = stateOrField ? 'path' in stateOrField ? 'pathState' : 'field' : 'form';\n  const fieldPath = stateOrField ? 'path' in stateOrField ? stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.path : unref(stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.name) : '';\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    type\n  };\n  return btoa(encodeURIComponent(JSON.stringify(idObject)));\n}\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(decodeURIComponent(atob(nodeId)));\n    const form = DEVTOOLS_FORMS[idObject.f];\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n      if (!field) {\n        return {};\n      }\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n    if (!form) {\n      return {};\n    }\n    const state = form.getPathState(idObject.ff);\n    return {\n      type: idObject.type,\n      form,\n      state\n    };\n  } catch (err) {\n    // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n  return {};\n}\nfunction buildFieldState(state) {\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: state.errors\n    }, {\n      key: 'initialValue',\n      value: state.initialValue\n    }, {\n      key: 'currentValue',\n      value: state.value\n    }, {\n      key: 'touched',\n      value: state.touched\n    }, {\n      key: 'dirty',\n      value: state.dirty\n    }, {\n      key: 'valid',\n      value: state.valid\n    }]\n  };\n}\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    isValidating,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'isValidating',\n      value: isValidating.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n        if (message) {\n          acc[key] = message;\n        }\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getValidityColors(valid) {\n  return {\n    bgColor: valid ? COLORS.success : COLORS.error,\n    textColor: valid ? COLORS.black : COLORS.white\n  };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useFieldWithChecked(path, rules, opts);\n  }\n  return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    controlled,\n    keepValueOnUnmount,\n    syncVModel,\n    form: controlForm\n  } = normalizeOptions(opts);\n  const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n  const form = controlForm || injectedForm;\n  const name = computed(() => normalizeFormPath(toValue(path)));\n  const validator = computed(() => {\n    const schema = toValue(form === null || form === void 0 ? void 0 : form.schema);\n    if (schema) {\n      return undefined;\n    }\n    const rulesValue = unref(rules);\n    if (isYupValidator(rulesValue) || isTypedSchema(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n    return normalizeRules(rulesValue);\n  });\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    flags\n  } = useFieldState(name, {\n    modelValue,\n    form,\n    bails,\n    label,\n    type,\n    validate: validator.value ? validate$1 : undefined\n  });\n  const errorMessage = computed(() => errors.value[0]);\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: syncVModel,\n      handleChange,\n      shouldValidate: () => validateOnValueUpdate && !flags.pendingReset\n    });\n  }\n  /**\n   * Handles common onBlur meta update\n   */\n  const handleBlur = (evt, shouldValidate = false) => {\n    meta.touched = true;\n    if (shouldValidate) {\n      validateWithStateMutation();\n    }\n  };\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[toValue(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n    if (validator.value) {\n      return validate(value.value, validator.value, {\n        name: toValue(name),\n        label: toValue(label),\n        values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n        bails\n      });\n    }\n    return {\n      valid: true,\n      errors: []\n    };\n  }\n  const validateWithStateMutation = withLatest(async () => {\n    meta.pending = true;\n    meta.validated = true;\n    return validateCurrentValue('validated-only');\n  }, result => {\n    if (flags.pendingUnmount[field.id]) {\n      return;\n    }\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    meta.valid = result.valid;\n    return result;\n  });\n  const validateValidStateOnly = withLatest(async () => {\n    return validateCurrentValue('silent');\n  }, result => {\n    meta.valid = result.valid;\n    return result;\n  });\n  function validate$1(opts) {\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n      return validateValidStateOnly();\n    }\n    return validateWithStateMutation();\n  }\n  // Common input/change event handler\n  function handleChange(e, shouldValidate = true) {\n    const newValue = normalizeEventValue(e);\n    setValue(newValue, shouldValidate);\n  }\n  // Runs the initial validation\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    }\n    // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n  function resetField(state) {\n    var _a;\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly();\n  }\n  const vm = getCurrentInstance();\n  function setValue(newValue, shouldValidate = true) {\n    value.value = vm && syncVModel ? applyModelModifiers(newValue, vm.props.modelModifiers) : newValue;\n    const validateFn = shouldValidate ? validateWithStateMutation : validateValidStateOnly;\n    validateFn();\n  }\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n  const valueProxy = computed({\n    get() {\n      return value.value;\n    },\n    set(newValue) {\n      setValue(newValue, validateOnValueUpdate);\n    }\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    watch(valueProxy, (value, oldValue) => {\n      if (!isObject(value)) {\n        return;\n      }\n      if (value === oldValue && isEqual(value, oldValue)) {\n        warn$1('Detected a possible deep change on field `value` ref, for nested changes please either set the entire ref value or use `setValue` or `handleChange`.');\n      }\n    }, {\n      deep: true\n    });\n  }\n  const field = {\n    id,\n    name,\n    label,\n    value: valueProxy,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (isEqual(value, oldValue)) {\n        return;\n      }\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  }\n  // if no associated form return the field API immediately\n  if (!form) {\n    return field;\n  }\n  // associate the field with the given form\n  // extract cross-field dependencies in a computed prop\n  const dependencies = computed(() => {\n    const rulesVal = validator.value;\n    // is falsy, a function schema or a yup schema\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || isTypedSchema(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  });\n  // Adds a watcher that runs the validation whenever field dependencies change\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n    const shouldValidate = !isEqual(deps, oldDeps);\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  onBeforeUnmount(() => {\n    var _a;\n    const shouldKeepValue = (_a = toValue(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : toValue(form.keepValuesOnUnmount);\n    const path = toValue(name);\n    if (shouldKeepValue || !form || flags.pendingUnmount[field.id]) {\n      form === null || form === void 0 ? void 0 : form.removePathState(path, id);\n      return;\n    }\n    flags.pendingUnmount[field.id] = true;\n    const pathState = form.getPathState(path);\n    const matchesId = Array.isArray(pathState === null || pathState === void 0 ? void 0 : pathState.id) && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) ? pathState === null || pathState === void 0 ? void 0 : pathState.id.includes(field.id) : (pathState === null || pathState === void 0 ? void 0 : pathState.id) === field.id;\n    if (!matchesId) {\n      return;\n    }\n    if ((pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && Array.isArray(pathState.value)) {\n      const valueIdx = pathState.value.findIndex(i => isEqual(i, toValue(field.checkedValue)));\n      if (valueIdx > -1) {\n        const newVal = [...pathState.value];\n        newVal.splice(valueIdx, 1);\n        form.setFieldValue(path, newVal);\n      }\n      if (Array.isArray(pathState.id)) {\n        pathState.id.splice(pathState.id.indexOf(field.id), 1);\n      }\n    } else {\n      form.unsetPathValue(toValue(name));\n    }\n    form.removePathState(path, id);\n  });\n  return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    label: undefined,\n    validateOnValueUpdate: true,\n    keepValueOnUnmount: undefined,\n    syncVModel: false,\n    controlled: true\n  });\n  const isVModelSynced = !!(opts === null || opts === void 0 ? void 0 : opts.syncVModel);\n  const modelPropName = typeof (opts === null || opts === void 0 ? void 0 : opts.syncVModel) === 'string' ? opts.syncVModel : (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue';\n  const initialValue = isVModelSynced && !('initialValue' in (opts || {})) ? getCurrentModelValue(getCurrentInstance(), modelPropName) : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n  if (!opts) {\n    return Object.assign(Object.assign({}, defaults()), {\n      initialValue\n    });\n  }\n  // TODO: Deprecate this in next major release\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n  const syncVModel = (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || (opts === null || opts === void 0 ? void 0 : opts.syncVModel) || false;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    initialValue,\n    controlled: controlled !== null && controlled !== void 0 ? controlled : true,\n    checkedValue,\n    syncVModel\n  });\n}\nfunction useFieldWithChecked(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n  function patchCheckedApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = toValue(field.value);\n      const checkedVal = toValue(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0 : isEqual(checkedVal, currentValue);\n    });\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a, _b;\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        if (shouldValidate) {\n          field.validate();\n        }\n        return;\n      }\n      const path = toValue(name);\n      const pathState = form === null || form === void 0 ? void 0 : form.getPathState(path);\n      const value = normalizeEventValue(e);\n      let newValue = (_b = toValue(checkedValue)) !== null && _b !== void 0 ? _b : value;\n      if (form && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && pathState.type === 'checkbox') {\n        newValue = resolveNextCheckboxValue(getFromPath(form.values, path) || [], newValue, undefined);\n      } else if ((opts === null || opts === void 0 ? void 0 : opts.type) === 'checkbox') {\n        newValue = resolveNextCheckboxValue(toValue(field.value), newValue, toValue(uncheckedValue));\n      }\n      handleChange(newValue, shouldValidate);\n    }\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n  return patchCheckedApi(_useField(name, rules, opts));\n}\nfunction useVModel({\n  prop,\n  value,\n  handleChange,\n  shouldValidate\n}) {\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n  if (!vm || !prop) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n    return;\n  }\n  const propName = typeof prop === 'string' ? prop : 'modelValue';\n  const emitName = `update:${propName}`;\n  // Component doesn't have a model prop setup (must be defined on the props)\n  if (!(propName in vm.props)) {\n    return;\n  }\n  watch(value, newValue => {\n    if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n    if (isEqual(newValue, value.value)) {\n      return;\n    }\n    handleChange(newValue, shouldValidate());\n  });\n}\nfunction getCurrentModelValue(vm, propName) {\n  if (!vm) {\n    return undefined;\n  }\n  return vm.props[propName];\n}\nconst FieldImpl = /** #__PURE__ */defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: props.validateOnModelUpdate,\n      keepValueOnUnmount: keepValue,\n      syncVModel: true\n    });\n    // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n    const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n    };\n    const sharedProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      function baseOnBlur(e) {\n        handleBlur(e, validateOnBlur);\n        if (isCallable(ctx.attrs.onBlur)) {\n          ctx.attrs.onBlur(e);\n        }\n      }\n      function baseOnInput(e) {\n        onChangeHandler(e, validateOnInput);\n        if (isCallable(ctx.attrs.onInput)) {\n          ctx.attrs.onInput(e);\n        }\n      }\n      function baseOnChange(e) {\n        onChangeHandler(e, validateOnChange);\n        if (isCallable(ctx.attrs.onChange)) {\n          ctx.attrs.onChange(e);\n        }\n      }\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n      return attrs;\n    });\n    const fieldProps = computed(() => {\n      const attrs = Object.assign({}, sharedProps.value);\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n      const tag = resolveTag(props, ctx);\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n      return attrs;\n    });\n    const componentProps = computed(() => {\n      return Object.assign(Object.assign({}, sharedProps.value), {\n        modelValue: value.value\n      });\n    });\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        componentField: componentProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: e => onChangeHandler(e, false),\n        handleReset,\n        handleBlur: sharedProps.value.onBlur,\n        setTouched,\n        setErrors\n      };\n    }\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n      return children;\n    };\n  }\n});\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n  return tag;\n}\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\nconst PRIVATE_PATH_STATE_KEYS = ['bails', 'fieldsCount', 'id', 'multiple', 'type', 'validate'];\nfunction resolveInitialValues(opts) {\n  const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n  const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n  if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n    return klona(schema.cast(providedValues) || {});\n  }\n  return klona(providedValues);\n}\nfunction useForm(opts) {\n  var _a;\n  const formId = FORM_COUNTER++;\n  // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  let FIELD_ID_COUNTER = 0;\n  // If the form is currently submitting\n  const isSubmitting = ref(false);\n  // If the form is currently validating\n  const isValidating = ref(false);\n  // The number of times the user tried to submit the form\n  const submitCount = ref(0);\n  // field arrays managed by this form\n  const fieldArrays = [];\n  // a private ref for all form values\n  const formValues = reactive(resolveInitialValues(opts));\n  const pathStates = ref([]);\n  const extraErrorsBag = ref({});\n  const pathStateLookup = ref({});\n  const rebuildPathLookup = debounceNextTick(() => {\n    pathStateLookup.value = pathStates.value.reduce((names, state) => {\n      names[normalizeFormPath(toValue(state.path))] = state;\n      return names;\n    }, {});\n  });\n  /**\n   * Manually sets an error message on a specific field\n   */\n  function setFieldError(field, message) {\n    const state = findPathState(field);\n    if (!state) {\n      if (typeof field === 'string') {\n        extraErrorsBag.value[normalizeFormPath(field)] = normalizeErrorItem(message);\n      }\n      return;\n    }\n    // Move the error from the extras path if exists\n    if (typeof field === 'string') {\n      const normalizedPath = normalizeFormPath(field);\n      if (extraErrorsBag.value[normalizedPath]) {\n        delete extraErrorsBag.value[normalizedPath];\n      }\n    }\n    state.errors = normalizeErrorItem(message);\n    state.valid = !state.errors.length;\n  }\n  /**\n   * Sets errors for the fields specified in the object\n   */\n  function setErrors(paths) {\n    keysOf(paths).forEach(path => {\n      setFieldError(path, paths[path]);\n    });\n  }\n  if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n    setErrors(opts.initialErrors);\n  }\n  const errorBag = computed(() => {\n    const pathErrors = pathStates.value.reduce((acc, state) => {\n      if (state.errors.length) {\n        acc[state.path] = state.errors;\n      }\n      return acc;\n    }, {});\n    return Object.assign(Object.assign({}, extraErrorsBag.value), pathErrors);\n  });\n  // Gets the first error of each field\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const errors = errorBag.value[key];\n      if (errors === null || errors === void 0 ? void 0 : errors.length) {\n        acc[key] = errors[0];\n      }\n      return acc;\n    }, {});\n  });\n  /**\n   * Holds a computed reference to all fields names and labels\n   */\n  const fieldNames = computed(() => {\n    return pathStates.value.reduce((names, state) => {\n      names[state.path] = {\n        name: state.path || '',\n        label: state.label || ''\n      };\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return pathStates.value.reduce((map, state) => {\n      var _a;\n      map[state.path] = (_a = state.bails) !== null && _a !== void 0 ? _a : true;\n      return map;\n    }, {});\n  });\n  // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n  // initial form values\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(pathStates, formValues, opts);\n  // form meta aggregations\n  const meta = useFormMeta(pathStates, formValues, originalInitialValues, errors);\n  const controlledValues = computed(() => {\n    return pathStates.value.reduce((acc, state) => {\n      const value = getFromPath(formValues, state.path);\n      setInPath(acc, state.path, value);\n      return acc;\n    }, {});\n  });\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  function createPathState(path, config) {\n    var _a, _b;\n    const initialValue = computed(() => getFromPath(initialValues.value, toValue(path)));\n    const pathStateExists = pathStateLookup.value[toValue(path)];\n    if (pathStateExists) {\n      if ((config === null || config === void 0 ? void 0 : config.type) === 'checkbox' || (config === null || config === void 0 ? void 0 : config.type) === 'radio') {\n        pathStateExists.multiple = true;\n      }\n      const id = FIELD_ID_COUNTER++;\n      if (Array.isArray(pathStateExists.id)) {\n        pathStateExists.id.push(id);\n      } else {\n        pathStateExists.id = [pathStateExists.id, id];\n      }\n      pathStateExists.fieldsCount++;\n      pathStateExists.__flags.pendingUnmount[id] = false;\n      return pathStateExists;\n    }\n    const currentValue = computed(() => getFromPath(formValues, toValue(path)));\n    const pathValue = toValue(path);\n    const id = FIELD_ID_COUNTER++;\n    const state = reactive({\n      id,\n      path,\n      touched: false,\n      pending: false,\n      valid: true,\n      validated: !!((_a = initialErrors[pathValue]) === null || _a === void 0 ? void 0 : _a.length),\n      initialValue,\n      errors: shallowRef([]),\n      bails: (_b = config === null || config === void 0 ? void 0 : config.bails) !== null && _b !== void 0 ? _b : false,\n      label: config === null || config === void 0 ? void 0 : config.label,\n      type: (config === null || config === void 0 ? void 0 : config.type) || 'default',\n      value: currentValue,\n      multiple: false,\n      __flags: {\n        pendingUnmount: {\n          [id]: false\n        },\n        pendingReset: false\n      },\n      fieldsCount: 1,\n      validate: config === null || config === void 0 ? void 0 : config.validate,\n      dirty: computed(() => {\n        return !isEqual(unref(currentValue), unref(initialValue));\n      })\n    });\n    pathStates.value.push(state);\n    pathStateLookup.value[pathValue] = state;\n    rebuildPathLookup();\n    if (errors.value[pathValue] && !initialErrors[pathValue]) {\n      nextTick(() => {\n        validateField(pathValue, {\n          mode: 'silent'\n        });\n      });\n    }\n    // Handles when a path changes\n    if (isRef(path)) {\n      watch(path, newPath => {\n        rebuildPathLookup();\n        const nextValue = klona(currentValue.value);\n        pathStateLookup.value[newPath] = state;\n        nextTick(() => {\n          setInPath(formValues, newPath, nextValue);\n        });\n      });\n    }\n    return state;\n  }\n  /**\n   * Batches validation runs in 5ms batches\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\n   */\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n  const validateSchema = withLatest(async mode => {\n    return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n  }, (formResult, [mode]) => {\n    // fields by id lookup\n    // errors fields names, we need it to also check if custom errors are updated\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n    // collect all the keys from the schema and all fields\n    // this ensures we have a complete key map of all the fields\n    const paths = [...new Set([...keysOf(formResult.results), ...pathStates.value.map(p => p.path), ...currentErrorsPaths])].sort();\n    // aggregates the paths into a single result object while applying the results on the fields\n    return paths.reduce((validation, _path) => {\n      const path = _path;\n      const pathState = findPathState(path) || findHoistedPath(path);\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      }\n      // clean up extra errors if path state exists\n      if (pathState && extraErrorsBag.value[path]) {\n        delete extraErrorsBag.value[path];\n      }\n      // field not rendered\n      if (!pathState) {\n        setFieldError(path, messages);\n        return validation;\n      }\n      // always update the valid flag regardless of the mode\n      pathState.valid = fieldResult.valid;\n      if (mode === 'silent') {\n        return validation;\n      }\n      if (mode === 'validated-only' && !pathState.validated) {\n        return validation;\n      }\n      setFieldError(pathState, fieldResult.errors);\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  });\n  function mutateAllPathState(mutation) {\n    pathStates.value.forEach(mutation);\n  }\n  function findPathState(path) {\n    const normalizedPath = typeof path === 'string' ? normalizeFormPath(path) : path;\n    const pathState = typeof normalizedPath === 'string' ? pathStateLookup.value[normalizedPath] : normalizedPath;\n    return pathState;\n  }\n  function findHoistedPath(path) {\n    const candidates = pathStates.value.filter(state => path.startsWith(state.path));\n    return candidates.reduce((bestCandidate, candidate) => {\n      if (!bestCandidate) {\n        return candidate;\n      }\n      return candidate.path.length > bestCandidate.path.length ? candidate : bestCandidate;\n    }, undefined);\n  }\n  let UNSET_BATCH = [];\n  let PENDING_UNSET;\n  function unsetPathValue(path) {\n    UNSET_BATCH.push(path);\n    if (!PENDING_UNSET) {\n      PENDING_UNSET = nextTick(() => {\n        const sortedPaths = [...UNSET_BATCH].sort().reverse();\n        sortedPaths.forEach(p => {\n          unsetPath(formValues, p);\n        });\n        UNSET_BATCH = [];\n        PENDING_UNSET = null;\n      });\n    }\n    return PENDING_UNSET;\n  }\n  function makeSubmissionFactory(onlyControlled) {\n    return function submitHandlerFactory(fn, onValidationError) {\n      return function submissionHandler(e) {\n        if (e instanceof Event) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        // Touch all fields\n        mutateAllPathState(s => s.touched = true);\n        isSubmitting.value = true;\n        submitCount.value++;\n        return validate().then(result => {\n          const values = klona(formValues);\n          if (result.valid && typeof fn === 'function') {\n            const controlled = klona(controlledValues.value);\n            let submittedValues = onlyControlled ? controlled : values;\n            if (result.values) {\n              submittedValues = result.values;\n            }\n            return fn(submittedValues, {\n              evt: e,\n              controlledValues: controlled,\n              setErrors,\n              setFieldError,\n              setTouched,\n              setFieldTouched,\n              setValues,\n              setFieldValue,\n              resetForm,\n              resetField\n            });\n          }\n          if (!result.valid && typeof onValidationError === 'function') {\n            onValidationError({\n              values,\n              evt: e,\n              errors: result.errors,\n              results: result.results\n            });\n          }\n        }).then(returnVal => {\n          isSubmitting.value = false;\n          return returnVal;\n        }, err => {\n          isSubmitting.value = false;\n          // re-throw the err so it doesn't go silent\n          throw err;\n        });\n      };\n    };\n  }\n  const handleSubmitImpl = makeSubmissionFactory(false);\n  const handleSubmit = handleSubmitImpl;\n  handleSubmit.withControlled = makeSubmissionFactory(true);\n  function removePathState(path, id) {\n    const idx = pathStates.value.findIndex(s => s.path === path);\n    const pathState = pathStates.value[idx];\n    if (idx === -1 || !pathState) {\n      return;\n    }\n    nextTick(() => {\n      validateField(path, {\n        mode: 'silent',\n        warn: false\n      });\n    });\n    if (pathState.multiple && pathState.fieldsCount) {\n      pathState.fieldsCount--;\n    }\n    if (Array.isArray(pathState.id)) {\n      const idIndex = pathState.id.indexOf(id);\n      if (idIndex >= 0) {\n        pathState.id.splice(idIndex, 1);\n      }\n      delete pathState.__flags.pendingUnmount[id];\n    }\n    if (!pathState.multiple || pathState.fieldsCount <= 0) {\n      pathStates.value.splice(idx, 1);\n      unsetInitialValue(path);\n      rebuildPathLookup();\n      delete pathStateLookup.value[path];\n    }\n  }\n  function markForUnmount(path) {\n    return mutateAllPathState(s => {\n      if (s.path.startsWith(path)) {\n        keysOf(s.__flags.pendingUnmount).forEach(id => {\n          s.__flags.pendingUnmount[id] = true;\n        });\n      }\n    });\n  }\n  const formCtx = {\n    formId,\n    values: formValues,\n    controlledValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    isValidating,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    setFieldError,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    resetField,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel,\n    createPathState,\n    getPathState: findPathState,\n    unsetPathValue,\n    removePathState,\n    initialValues: initialValues,\n    getAllPathStates: () => pathStates.value,\n    markForUnmount,\n    isFieldTouched,\n    isFieldDirty,\n    isFieldValid\n  };\n  /**\n   * Sets a single field value\n   */\n  function setFieldValue(field, value, shouldValidate = true) {\n    const clonedValue = klona(value);\n    const path = typeof field === 'string' ? field : field.path;\n    const pathState = findPathState(path);\n    if (!pathState) {\n      createPathState(path);\n    }\n    setInPath(formValues, path, clonedValue);\n    if (shouldValidate) {\n      validateField(path);\n    }\n  }\n  function forceSetValues(fields, shouldValidate = true) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    });\n    // set up new values\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path], false);\n    });\n    if (shouldValidate) {\n      validate();\n    }\n  }\n  /**\n   * Sets multiple fields values\n   */\n  function setValues(fields, shouldValidate = true) {\n    merge(formValues, fields);\n    // regenerate the arrays when the form values change\n    fieldArrays.forEach(f => f && f.reset());\n    if (shouldValidate) {\n      validate();\n    }\n  }\n  function createModel(path) {\n    const pathState = findPathState(unref(path)) || createPathState(path);\n    return computed({\n      get() {\n        return pathState.value;\n      },\n      set(value) {\n        const pathValue = unref(path);\n        setFieldValue(pathValue, value, false);\n        pathState.validated = true;\n        pathState.pending = true;\n        validateField(pathValue).then(() => {\n          pathState.pending = false;\n        });\n      }\n    });\n  }\n  function useFieldModel(pathOrPaths) {\n    if (!Array.isArray(pathOrPaths)) {\n      return createModel(pathOrPaths);\n    }\n    return pathOrPaths.map(createModel);\n  }\n  /**\n   * Sets the touched meta state on a field\n   */\n  function setFieldTouched(field, isTouched) {\n    const pathState = findPathState(field);\n    if (pathState) {\n      pathState.touched = isTouched;\n    }\n  }\n  function isFieldTouched(field) {\n    var _a;\n    return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.touched);\n  }\n  function isFieldDirty(field) {\n    var _a;\n    return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.dirty);\n  }\n  function isFieldValid(field) {\n    var _a;\n    return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.valid);\n  }\n  /**\n   * Sets the touched meta state on multiple fields\n   */\n  function setTouched(fields) {\n    if (typeof fields === 'boolean') {\n      mutateAllPathState(state => {\n        state.touched = fields;\n      });\n      return;\n    }\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  function resetField(field, state) {\n    var _a;\n    const newValue = state && 'value' in state ? state.value : getFromPath(initialValues.value, field);\n    const pathState = findPathState(field);\n    if (pathState) {\n      pathState.__flags.pendingReset = true;\n    }\n    setFieldInitialValue(field, klona(newValue));\n    setFieldValue(field, newValue, false);\n    setFieldTouched(field, (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false);\n    setFieldError(field, (state === null || state === void 0 ? void 0 : state.errors) || []);\n    nextTick(() => {\n      if (pathState) {\n        pathState.__flags.pendingReset = false;\n      }\n    });\n  }\n  /**\n   * Resets all fields\n   */\n  function resetForm(resetState, opts) {\n    let newValues = (resetState === null || resetState === void 0 ? void 0 : resetState.values) ? resetState.values : originalInitialValues.value;\n    newValues = isTypedSchema(schema) && isCallable(schema.cast) ? schema.cast(newValues) : newValues;\n    setInitialValues(newValues);\n    mutateAllPathState(state => {\n      var _a;\n      state.__flags.pendingReset = true;\n      state.validated = false;\n      state.touched = ((_a = resetState === null || resetState === void 0 ? void 0 : resetState.touched) === null || _a === void 0 ? void 0 : _a[state.path]) || false;\n      setFieldValue(state.path, getFromPath(newValues, state.path), false);\n      setFieldError(state.path, undefined);\n    });\n    (opts === null || opts === void 0 ? void 0 : opts.force) ? forceSetValues(newValues, false) : setValues(newValues, false);\n    setErrors((resetState === null || resetState === void 0 ? void 0 : resetState.errors) || {});\n    submitCount.value = (resetState === null || resetState === void 0 ? void 0 : resetState.submitCount) || 0;\n    nextTick(() => {\n      validate({\n        mode: 'silent'\n      });\n      mutateAllPathState(state => {\n        state.__flags.pendingReset = false;\n      });\n    });\n  }\n  async function validate(opts) {\n    const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n    if (mode === 'force') {\n      mutateAllPathState(f => f.validated = true);\n    }\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema(mode);\n    }\n    isValidating.value = true;\n    // No schema, each field is responsible to validate itself\n    const validations = await Promise.all(pathStates.value.map(state => {\n      if (!state.validate) {\n        return Promise.resolve({\n          key: state.path,\n          valid: true,\n          errors: []\n        });\n      }\n      return state.validate(opts).then(result => {\n        return {\n          key: state.path,\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    isValidating.value = false;\n    const results = {};\n    const errors = {};\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n  async function validateField(path, opts) {\n    var _a;\n    const state = findPathState(path);\n    if (state && (opts === null || opts === void 0 ? void 0 : opts.mode) !== 'silent') {\n      state.validated = true;\n    }\n    if (schema) {\n      const {\n        results\n      } = await validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'validated-only');\n      return results[path] || {\n        errors: [],\n        valid: true\n      };\n    }\n    if (state === null || state === void 0 ? void 0 : state.validate) {\n      return state.validate(opts);\n    }\n    const shouldWarn = !state && ((_a = opts === null || opts === void 0 ? void 0 : opts.warn) !== null && _a !== void 0 ? _a : true);\n    if (shouldWarn) {\n      if (process.env.NODE_ENV !== 'production') {\n        warn$1(`field with path ${path} was not found`);\n      }\n    }\n    return Promise.resolve({\n      errors: [],\n      valid: true\n    });\n  }\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\n   * Sneaky function to set initial field values\n   */\n  function stageInitialValue(path, value, updateOriginal = false) {\n    setFieldInitialValue(path, value);\n    setInPath(formValues, path, value);\n    if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n    isValidating.value = true;\n    const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue) ? await validateTypedSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    isValidating.value = false;\n    return formResult;\n  }\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  });\n  // Trigger initial validation\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    }\n    // if validate on mount was enabled\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    }\n    // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  }\n  // Provide injections\n  provide(FormContextKey, formCtx);\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      isValidating: isValidating.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n  function defineComponentBinds(path, config) {\n    const pathState = findPathState(toValue(path)) || createPathState(path);\n    const evalConfig = () => isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {};\n    function onBlur() {\n      var _a;\n      pathState.touched = true;\n      const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n      if (validateOnBlur) {\n        validateField(pathState.path);\n      }\n    }\n    function onUpdateModelValue(value) {\n      var _a;\n      const validateOnModelUpdate = (_a = evalConfig().validateOnModelUpdate) !== null && _a !== void 0 ? _a : getConfig().validateOnModelUpdate;\n      setFieldValue(pathState.path, value, validateOnModelUpdate);\n    }\n    const props = computed(() => {\n      if (isCallable(config)) {\n        const configVal = config(pathState);\n        const model = configVal.model || 'modelValue';\n        return Object.assign({\n          onBlur,\n          [model]: pathState.value,\n          [`onUpdate:${model}`]: onUpdateModelValue\n        }, configVal.props || {});\n      }\n      const model = (config === null || config === void 0 ? void 0 : config.model) || 'modelValue';\n      const base = {\n        onBlur,\n        [model]: pathState.value,\n        [`onUpdate:${model}`]: onUpdateModelValue\n      };\n      if (config === null || config === void 0 ? void 0 : config.mapProps) {\n        return Object.assign(Object.assign({}, base), config.mapProps(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n      }\n      return base;\n    });\n    return props;\n  }\n  function defineInputBinds(path, config) {\n    const pathState = findPathState(toValue(path)) || createPathState(path);\n    const evalConfig = () => isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {};\n    function onBlur() {\n      var _a;\n      pathState.touched = true;\n      const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n      if (validateOnBlur) {\n        validateField(pathState.path);\n      }\n    }\n    function onInput(e) {\n      var _a;\n      const value = normalizeEventValue(e);\n      const validateOnInput = (_a = evalConfig().validateOnInput) !== null && _a !== void 0 ? _a : getConfig().validateOnInput;\n      setFieldValue(pathState.path, value, validateOnInput);\n    }\n    function onChange(e) {\n      var _a;\n      const value = normalizeEventValue(e);\n      const validateOnChange = (_a = evalConfig().validateOnChange) !== null && _a !== void 0 ? _a : getConfig().validateOnChange;\n      setFieldValue(pathState.path, value, validateOnChange);\n    }\n    const props = computed(() => {\n      const base = {\n        value: pathState.value,\n        onChange,\n        onInput,\n        onBlur\n      };\n      if (isCallable(config)) {\n        return Object.assign(Object.assign({}, base), config(omit(pathState, PRIVATE_PATH_STATE_KEYS)).attrs || {});\n      }\n      if (config === null || config === void 0 ? void 0 : config.mapAttrs) {\n        return Object.assign(Object.assign({}, base), config.mapAttrs(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n      }\n      return base;\n    });\n    return props;\n  }\n  return Object.assign(Object.assign({}, formCtx), {\n    values: readonly(formValues),\n    handleReset: () => resetForm(),\n    submitForm,\n    defineComponentBinds,\n    defineInputBinds\n  });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(pathsState, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !isEqual(currentValues, unref(initialValues));\n  });\n  function calculateFlags() {\n    const states = pathsState.value;\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = states[mergeMethod](s => s[flag]);\n      return acc;\n    }, {});\n  }\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(pathsState, formValues, opts) {\n  const values = resolveInitialValues(opts);\n  const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(values);\n  // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n  const originalInitialValues = ref(klona(values));\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = merge(klona(initialValues.value) || {}, klona(values));\n    originalInitialValues.value = merge(klona(originalInitialValues.value) || {}, klona(values));\n    if (!updateFields) {\n      return;\n    }\n    // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n    pathsState.value.forEach(state => {\n      const wasTouched = state.touched;\n      if (wasTouched) {\n        return;\n      }\n      const newValue = getFromPath(initialValues.value, state.path);\n      setInPath(formValues, state.path, klona(newValue));\n    });\n  }\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      if (value) {\n        setInitialValues(value, true);\n      }\n    }, {\n      deep: true\n    });\n  }\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\nconst FormImpl = /** #__PURE__ */defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: null,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      errorBag,\n      values,\n      meta,\n      isSubmitting,\n      isValidating,\n      submitCount,\n      controlledValues,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetField\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, {\n      evt\n    }) => {\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n      handleReset();\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n    function getValues() {\n      return klona(values);\n    }\n    function getMeta() {\n      return klona(meta.value);\n    }\n    function getErrors() {\n      return klona(errors.value);\n    }\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        errorBag: errorBag.value,\n        values,\n        isSubmitting: isSubmitting.value,\n        isValidating: isValidating.value,\n        submitCount: submitCount.value,\n        controlledValues: controlledValues.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        getValues,\n        getMeta,\n        getErrors\n      };\n    }\n    // expose these functions and methods as part of public API\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField,\n      resetField,\n      getValues,\n      getMeta,\n      getErrors\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : !props.as ? null : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (!tag) {\n        return children;\n      }\n      // Attributes to add on a native `form` tag\n      const formAttrs = tag === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n});\nconst Form = FormImpl;\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]);\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const noOp = () => {};\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    }\n    return noOpApi;\n  }\n  if (!unref(arrayPath)) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    }\n    return noOpApi;\n  }\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n  let entryCounter = 0;\n  function getCurrentValues() {\n    return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n  }\n  function initFields() {\n    const currentValues = getCurrentValues();\n    if (!Array.isArray(currentValues)) {\n      return;\n    }\n    fields.value = currentValues.map((v, idx) => createEntry(v, idx, fields.value));\n    updateEntryFlags();\n  }\n  initFields();\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n  function createEntry(value, idx, currentFields) {\n    // Skips the work by returning the current entry if it already exists\n    // This should make the `key` prop stable and doesn't cause more re-renders than needed\n    // The value is computed and should update anyways\n    if (currentFields && !isNullOrUndefined(idx) && currentFields[idx]) {\n      return currentFields[idx];\n    }\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computedDeep({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n          if (idx === -1) {\n            if (process.env.NODE_ENV !== 'production') {\n              warn(`Attempting to update a non-existent array item`);\n            }\n            return;\n          }\n          update(idx, value);\n        }\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n  function afterMutation() {\n    updateEntryFlags();\n    // Should trigger a silent validation since a field may not do that #4096\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'silent'\n    });\n  }\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    const fieldPath = pathName + `[${idx}]`;\n    form.markForUnmount(fieldPath);\n    form.unsetInitialValue(fieldPath);\n    setInPath(form.values, pathName, newValue);\n    fields.value.splice(idx, 1);\n    afterMutation();\n  }\n  function push(initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    setInPath(form.values, pathName, newValue);\n    fields.value.push(createEntry(value));\n    afterMutation();\n  }\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    // the old switcheroo\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n  function insert(idx, initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form.stageInitialValue(pathName, arr);\n    setInPath(form.values, pathName, arr);\n    initFields();\n    afterMutation();\n  }\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n    setInPath(form.values, `${pathName}[${idx}]`, value);\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'validated-only'\n    });\n  }\n  function prepend(initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [value, ...normalizedPathValue];\n    form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    setInPath(form.values, pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    afterMutation();\n  }\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  // Makes sure to sync the form values with the array value if they go out of sync\n  // #4153\n  watch(getCurrentValues, formValues => {\n    const fieldsValues = fields.value.map(f => f.value);\n    // If form values are not the same as the current values then something overrode them.\n    if (!isEqual(formValues, fieldsValues)) {\n      initFields();\n    }\n  });\n  return fieldArrayCtx;\n}\nconst FieldArrayImpl = /** #__PURE__ */defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = /** #__PURE__ */defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs);\n      // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      }\n      // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n      return h(tag, attrs, children);\n    };\n  }\n});\nconst ErrorMessage = ErrorMessageImpl;\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n    return form.resetForm(state);\n  };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.dirty : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.dirty) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.touched : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.touched) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.valid : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.valid) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form is validating or not\n */\nfunction useIsValidating() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isValidating.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  const field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (field) {\n      return field.validate();\n    }\n    if (form && path) {\n      return form === null || form === void 0 ? void 0 : form.validateField(toValue(path));\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`field with name ${unref(path)} was not found`);\n    }\n    return Promise.resolve({\n      errors: [],\n      valid: true\n    });\n  };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n    return form.validate();\n  };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, toValue(path));\n    }\n    return toValue(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[toValue(path)];\n    }\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n  }\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n    return onSubmit(e);\n  };\n}\n\n/**\n * Sets a field's error message\n */\nfunction useSetFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldError(message) {\n    if (path && form) {\n      form.setFieldError(toValue(path), message);\n      return;\n    }\n    if (field) {\n      field.setErrors(message || []);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set error message since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n    }\n  };\n}\n\n/**\n * Sets a field's touched meta state\n */\nfunction useSetFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldTouched(touched) {\n    if (path && form) {\n      form.setFieldTouched(toValue(path), touched);\n      return;\n    }\n    if (field) {\n      field.setTouched(touched);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set touched state since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n    }\n  };\n}\n\n/**\n * Sets a field's value\n */\nfunction useSetFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldValue(value, shouldValidate = true) {\n    if (path && form) {\n      form.setFieldValue(toValue(path), value, shouldValidate);\n      return;\n    }\n    if (field) {\n      field.setValue(value, shouldValidate);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set value since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n    }\n  };\n}\n\n/**\n * Sets multiple fields errors\n */\nfunction useSetFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormErrors(fields) {\n    if (form) {\n      form.setErrors(fields);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set errors because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormErrors;\n}\n\n/**\n * Sets multiple fields touched or all fields in the form\n */\nfunction useSetFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormTouched(fields) {\n    if (form) {\n      form.setTouched(fields);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set touched state because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormTouched;\n}\n\n/**\n * Sets multiple fields values\n */\nfunction useSetFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormValues(fields, shouldValidate = true) {\n    if (form) {\n      form.setValues(fields, shouldValidate);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set form values because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormValues;\n}\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, normalizeRules, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useIsValidating, useResetForm, useSetFieldError, useSetFieldTouched, useSetFieldValue, useSetFormErrors, useSetFormTouched, useSetFormValues, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };","map":{"version":3,"names":["getCurrentInstance","inject","warn","warn$1","computed","toValue","ref","watch","nextTick","unref","isRef","reactive","onUnmounted","onMounted","provide","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","readonly","watchEffect","shallowRef","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","isObjectLike","getTag","Object","prototype","toString","call","isPlainObject","getPrototypeOf","proto","merge","target","source","keys","forEach","key","normalizeFormPath","path","pathArr","split","length","fullPath","String","i","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","set","val","klona","enumerable","get","configurable","writable","defineProperty","x","k","list","tmp","str","create","__proto__","Set","add","Map","Date","RegExp","flags","constructor","buffer","slice","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isTypedSchema","parse","__type","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","isNotNestedPath","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","Event","srcElement","isPropPresent","prop","isEqual","a","b","size","entries","has","isFile","name","lastModified","ArrayBuffer","isView","valueOf","File","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","clearTimeout","result","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","runLatest","pending","computedDeep","baseRef","newValue","deep","normalizeErrorItem","resolveFieldOrPathState","form","state","getPathState","field","process","env","NODE_ENV","omit","debounceNextTick","lastTick","thisTick","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","parseInputValue","valueAsNumber","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","label","formData","values","_validate","errors","valid","validateFieldWithTypedSchema","ctx","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","isYupError","err","yupToTypedSchema","yupSchema","schema","output","abortEarly","typedSchema","messages","fillTargetValues","fieldCtx","normalize","param","validateTypedSchema","validationResult","results","m","validateObjectSchema","opts","paths","validations","_c","strings","names","fieldResult","bailsMap","isAllValid","validationResults","all","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","setErrors","createFieldErrors","MAX_SAFE_INTEGER","meta","createFieldMeta","setState","touched","pendingUnmount","pendingReset","createPathState","setFieldError","setFieldTouched","__flags","modelRef","resolveInitialValue","initialValues","stageInitialValue","resolveModelValue","setFieldValue","validated","dirty","immediate","flush","installDevtoolsPlugin","app","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","validateField","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getValidityColors","formTreeNodes","getAllPathStates","mapPathForDevtoolsInspector","buildFormTree","tree","pop","children","c","encodeNodeId","tags","backgroundColor","getFieldNodeTags","fieldsCount","stateOrField","fieldPath","idObject","f","ff","btoa","encodeURIComponent","JSON","stringify","decodeURIComponent","atob","errorBag","isSubmitting","isValidating","submitCount","useField","useFieldWithChecked","_useField","validateOnMount","validateOnValueUpdate","controlled","keepValueOnUnmount","syncVModel","controlForm","normalizeOptions","injectedForm","rulesValue","validate$1","errorMessage","useVModel","handleChange","shouldValidate","handleBlur","validateWithStateMutation","validateCurrentValue","mode","validateSchema","validateValidStateOnly","e","setValue","setTouched","isTouched","props","modelModifiers","validateFn","valueProxy","oldValue","handleReset","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","shouldKeepValue","keepValuesOnUnmount","removePathState","pathState","matchesId","valueIdx","indexOf","unsetPathValue","defaults","isVModelSynced","modelPropName","getCurrentModelValue","valueProp","standalone","patchCheckedApi","checked","checkedVal","handleCheckboxChange","propName","emitName","emit","propValue","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","onChangeHandler","handleChangeWithModel","sharedProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","fieldProps","resolveTag","componentProps","componentField","handleInput","expose","reset","_d","Field","FORM_COUNTER","PRIVATE_PATH_STATE_KEYS","resolveInitialValues","providedValues","validationSchema","cast","useForm","FIELD_ID_COUNTER","fieldArrays","formValues","pathStates","extraErrorsBag","pathStateLookup","rebuildPathLookup","findPathState","normalizedPath","initialErrors","pathErrors","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","controlledValues","config","pathStateExists","pathValue","newPath","nextValue","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","currentErrorsPaths","formCtx","p","sort","validation","_path","findHoistedPath","mutateAllPathState","mutation","candidates","startsWith","bestCandidate","candidate","UNSET_BATCH","PENDING_UNSET","sortedPaths","reverse","makeSubmissionFactory","onlyControlled","submitHandlerFactory","onValidationError","submissionHandler","preventDefault","stopPropagation","s","then","submittedValues","setValues","returnVal","handleSubmitImpl","handleSubmit","withControlled","idIndex","unsetInitialValue","markForUnmount","setFieldInitialValue","useFieldModel","isFieldTouched","isFieldDirty","isFieldValid","clonedValue","forceSetValues","createModel","pathOrPaths","resetState","newValues","force","every","shouldWarn","updateOriginal","schemaValue","submitForm","submit","initialTouched","defineComponentBinds","evalConfig","onUpdateModelValue","configVal","model","base","mapProps","defineInputBinds","mapAttrs","pathsState","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","states","flag","mergeMethod","updateFields","wasTouched","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","getValues","getMeta","getErrors","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","getCurrentValues","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","currentFields","afterMutation","pathName","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","fieldsValues","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","fieldOrPath","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useIsValidating","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb","useSetFieldError","useSetFieldTouched","useSetFieldValue","useSetFormErrors","setFormErrors","useSetFormTouched","setFormTouched","useSetFormValues","setFormValues","validateObject"],"sources":["C:/Users/tkara.KARAHAN/OneDrive/Masaüstü/Yeni klasör/meetual.ui/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.11.8\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, toValue, ref, watch, nextTick, unref, isRef, reactive, onUnmounted, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, readonly, watchEffect, shallowRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n    return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction toNumber(value) {\n    const n = parseFloat(value);\n    return isNaN(n) ? value : n;\n}\nfunction isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return Object.prototype.toString.call(value);\n}\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\nfunction merge(target, source) {\n    Object.keys(source).forEach(key => {\n        if (isPlainObject(source[key])) {\n            if (!target[key]) {\n                target[key] = {};\n            }\n            merge(target[key], source[key]);\n            return;\n        }\n        target[key] = source[key];\n    });\n    return target;\n}\n/**\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\n */\nfunction normalizeFormPath(path) {\n    const pathArr = path.split('.');\n    if (!pathArr.length) {\n        return '';\n    }\n    let fullPath = String(pathArr[0]);\n    for (let i = 1; i < pathArr.length; i++) {\n        if (isIndex(pathArr[i])) {\n            fullPath += `[${pathArr[i]}]`;\n            continue;\n        }\n        fullPath += `.${pathArr[i]}`;\n    }\n    return fullPath;\n}\n\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n    // makes sure new rules are properly formatted.\n    guardExtend(id, validator);\n    RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n    return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n    if (isCallable(validator)) {\n        return;\n    }\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n    return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n    return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n    return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n    return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n    return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n    return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n    return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n    if (!evt) {\n        return false;\n    }\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n        return true;\n    }\n    // this is for IE and Cypress #3161\n    /* istanbul ignore next */\n    if (evt && evt.srcElement) {\n        return true;\n    }\n    return false;\n}\nfunction isPropPresent(obj, prop) {\n    return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (a.constructor !== b.constructor)\n            return false;\n        // eslint-disable-next-line no-var\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!isEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            for (i of a.entries())\n                if (!isEqual(i[1], b.get(i[0])))\n                    return false;\n            return true;\n        }\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\n        // #3911\n        if (isFile(a) && isFile(b)) {\n            if (a.size !== b.size)\n                return false;\n            if (a.name !== b.name)\n                return false;\n            if (a.lastModified !== b.lastModified)\n                return false;\n            if (a.type !== b.type)\n                return false;\n            return true;\n        }\n        if (a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            return true;\n        }\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        if (a.constructor === RegExp)\n            return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf)\n            return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString)\n            return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        for (i = length; i-- !== 0;) {\n            // eslint-disable-next-line no-var\n            var key = keys[i];\n            if (!isEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isFile(a) {\n    if (!isClient) {\n        return false;\n    }\n    return a instanceof File;\n}\n\nfunction cleanupNonNestedPath(path) {\n    if (isNotNestedPath(path)) {\n        return path.replace(/\\[|\\]/gi, '');\n    }\n    return path;\n}\nfunction getFromPath(object, path, fallback) {\n    if (!object) {\n        return fallback;\n    }\n    if (isNotNestedPath(path)) {\n        return object[cleanupNonNestedPath(path)];\n    }\n    const resolvedValue = (path || '')\n        .split(/\\.|\\[(\\d+)\\]/)\n        .filter(Boolean)\n        .reduce((acc, propKey) => {\n        if (isContainerValue(acc) && propKey in acc) {\n            return acc[propKey];\n        }\n        return fallback;\n    }, object);\n    return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n    if (isNotNestedPath(path)) {\n        object[cleanupNonNestedPath(path)] = value;\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, set it\n        if (i === keys.length - 1) {\n            acc[keys[i]] = value;\n            return;\n        }\n        // Key does not exist, create a container for it\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            // container can be either an object or an array depending on the next key if it exists\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n        }\n        acc = acc[keys[i]];\n    }\n}\nfunction unset(object, key) {\n    if (Array.isArray(object) && isIndex(key)) {\n        object.splice(Number(key), 1);\n        return;\n    }\n    if (isObject(object)) {\n        delete object[key];\n    }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n    if (isNotNestedPath(path)) {\n        delete object[cleanupNonNestedPath(path)];\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, unset it\n        if (i === keys.length - 1) {\n            unset(acc, keys[i]);\n            break;\n        }\n        // Key does not exist, exit\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            break;\n        }\n        acc = acc[keys[i]];\n    }\n    const pathValues = keys.map((_, idx) => {\n        return getFromPath(object, keys.slice(0, idx).join('.'));\n    });\n    for (let i = pathValues.length - 1; i >= 0; i--) {\n        if (!isEmptyContainer(pathValues[i])) {\n            continue;\n        }\n        if (i === 0) {\n            unset(object, keys[0]);\n            continue;\n        }\n        unset(pathValues[i - 1], keys[i - 1]);\n    }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n    return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n    const vm = getCurrentInstance();\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n    warn$1(`[vee-validate]: ${message}`);\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n    if (Array.isArray(currentValue)) {\n        const newVal = [...currentValue];\n        // Use isEqual since checked object values can possibly fail the equality check #3883\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n        return newVal;\n    }\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    let lastResult;\n    return function (...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        if (!inThrottle) {\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n            lastResult = func.apply(context, args);\n        }\n        return lastResult;\n    };\n}\nfunction debounceAsync(inner, ms = 0) {\n    let timer = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        if (timer) {\n            clearTimeout(timer);\n        }\n        // @ts-expect-error timer is a number\n        timer = setTimeout(() => {\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n        }, ms);\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\nfunction applyModelModifiers(value, modifiers) {\n    if (!isObject(modifiers)) {\n        return value;\n    }\n    if (modifiers.number) {\n        return toNumber(value);\n    }\n    return value;\n}\nfunction withLatest(fn, onDone) {\n    let latestRun;\n    return async function runLatest(...args) {\n        const pending = fn(...args);\n        latestRun = pending;\n        const result = await pending;\n        if (pending !== latestRun) {\n            return result;\n        }\n        latestRun = undefined;\n        onDone(result, args);\n        return result;\n    };\n}\nfunction computedDeep({ get, set }) {\n    const baseRef = ref(klona(get()));\n    watch(get, newValue => {\n        if (isEqual(newValue, baseRef.value)) {\n            return;\n        }\n        baseRef.value = klona(newValue);\n    }, {\n        deep: true,\n    });\n    watch(baseRef, newValue => {\n        if (isEqual(newValue, get())) {\n            return;\n        }\n        set(klona(newValue));\n    }, {\n        deep: true,\n    });\n    return baseRef;\n}\nfunction normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n}\nfunction resolveFieldOrPathState(path) {\n    const form = injectWithSelf(FormContextKey);\n    const state = path ? computed(() => form === null || form === void 0 ? void 0 : form.getPathState(toValue(path))) : undefined;\n    const field = path ? undefined : inject(FieldContextKey);\n    if (!field && !(state === null || state === void 0 ? void 0 : state.value)) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`field with name ${toValue(path)} was not found`);\n        }\n    }\n    return state || field;\n}\nfunction omit(obj, keys) {\n    const target = {};\n    for (const key in obj) {\n        if (!keys.includes(key)) {\n            target[key] = obj[key];\n        }\n    }\n    return target;\n}\nfunction debounceNextTick(inner) {\n    let lastTick = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        const thisTick = nextTick(() => {\n            if (lastTick !== thisTick) {\n                return;\n            }\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n            lastTick = null;\n        });\n        lastTick = thisTick;\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\n\nfunction normalizeChildren(tag, context, slotProps) {\n    if (!context.slots.default) {\n        return context.slots.default;\n    }\n    if (typeof tag === 'string' || !tag) {\n        return context.slots.default(slotProps());\n    }\n    return {\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\n    };\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n    if (hasValueBinding(el)) {\n        return el._value;\n    }\n    return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n    return '_value' in el;\n}\n\nfunction parseInputValue(el) {\n    if (el.type === 'number') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    if (el.type === 'range') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    return el.value;\n}\nfunction normalizeEventValue(value) {\n    if (!isEvent(value)) {\n        return value;\n    }\n    const input = value.target;\n    // Vue sets the current bound value on `_value` prop\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n        return getBoundValue(input);\n    }\n    if (input.type === 'file' && input.files) {\n        const files = Array.from(input.files);\n        return input.multiple ? files : files[0];\n    }\n    if (isNativeMultiSelect(input)) {\n        return Array.from(input.options)\n            .filter(opt => opt.selected && !opt.disabled)\n            .map(getBoundValue);\n    }\n    // makes sure we get the actual `option` bound value\n    // #3440\n    if (isNativeSelect(input)) {\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\n    }\n    return parseInputValue(input);\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n    const acc = {};\n    Object.defineProperty(acc, '_$$isNormalized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n    if (!rules) {\n        return acc;\n    }\n    // Object is already normalized, skip.\n    if (isObject(rules) && rules._$$isNormalized) {\n        return rules;\n    }\n    if (isObject(rules)) {\n        return Object.keys(rules).reduce((prev, curr) => {\n            const params = normalizeParams(rules[curr]);\n            if (rules[curr] !== false) {\n                prev[curr] = buildParams(params);\n            }\n            return prev;\n        }, acc);\n    }\n    /* istanbul ignore if */\n    if (typeof rules !== 'string') {\n        return acc;\n    }\n    return rules.split('|').reduce((prev, rule) => {\n        const parsedRule = parseRule(rule);\n        if (!parsedRule.name) {\n            return prev;\n        }\n        prev[parsedRule.name] = buildParams(parsedRule.params);\n        return prev;\n    }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n    if (params === true) {\n        return [];\n    }\n    if (Array.isArray(params)) {\n        return params;\n    }\n    if (isObject(params)) {\n        return params;\n    }\n    return [params];\n}\nfunction buildParams(provided) {\n    const mapValueToLocator = (value) => {\n        // A target param using interpolation\n        if (typeof value === 'string' && value[0] === '@') {\n            return createLocator(value.slice(1));\n        }\n        return value;\n    };\n    if (Array.isArray(provided)) {\n        return provided.map(mapValueToLocator);\n    }\n    // #3073\n    if (provided instanceof RegExp) {\n        return [provided];\n    }\n    return Object.keys(provided).reduce((prev, key) => {\n        prev[key] = mapValueToLocator(provided[key]);\n        return prev;\n    }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = (rule) => {\n    let params = [];\n    const name = rule.split(':')[0];\n    if (rule.includes(':')) {\n        params = rule.split(':').slice(1).join(':').split(',');\n    }\n    return { name, params };\n};\nfunction createLocator(value) {\n    const locator = (crossTable) => {\n        const val = getFromPath(crossTable, value) || crossTable[value];\n        return val;\n    };\n    locator.__locatorRef = value;\n    return locator;\n}\nfunction extractLocators(params) {\n    if (Array.isArray(params)) {\n        return params.filter(isLocator);\n    }\n    return keysOf(params)\n        .filter(key => isLocator(params[key]))\n        .map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n    generateMessage: ({ field }) => `${field} is not valid.`,\n    bails: true,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnInput: false,\n    validateOnModelUpdate: true,\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = (newConf) => {\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n    const field = {\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n        rules,\n        label: options === null || options === void 0 ? void 0 : options.label,\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\n    };\n    const result = await _validate(field, value);\n    const errors = result.errors;\n    return {\n        errors,\n        valid: !errors.length,\n    };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n    if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n        return validateFieldWithTypedSchema(value, field.rules);\n    }\n    // if a generic function or chain of generic functions\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\n        const ctx = {\n            field: field.label || field.name,\n            name: field.name,\n            label: field.label,\n            form: field.formData,\n            value,\n        };\n        // Normalize the pipeline\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n        const length = pipeline.length;\n        const errors = [];\n        for (let i = 0; i < length; i++) {\n            const rule = pipeline[i];\n            const result = await rule(value, ctx);\n            const isValid = typeof result !== 'string' && !Array.isArray(result) && result;\n            if (isValid) {\n                continue;\n            }\n            if (Array.isArray(result)) {\n                errors.push(...result);\n            }\n            else {\n                const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n                errors.push(message);\n            }\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n        return {\n            errors,\n        };\n    }\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\n    const errors = [];\n    const rulesKeys = Object.keys(normalizedContext.rules);\n    const length = rulesKeys.length;\n    for (let i = 0; i < length; i++) {\n        const rule = rulesKeys[i];\n        const result = await _test(normalizedContext, value, {\n            name: rule,\n            params: normalizedContext.rules[rule],\n        });\n        if (result.error) {\n            errors.push(result.error);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n    }\n    return {\n        errors,\n    };\n}\nfunction isYupError(err) {\n    return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(values) {\n            var _a;\n            try {\n                const output = await yupSchema.validate(values, { abortEarly: false });\n                return {\n                    output,\n                    errors: [],\n                };\n            }\n            catch (err) {\n                // Yup errors have a name prop one them.\n                // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n                if (!isYupError(err)) {\n                    throw err;\n                }\n                if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n                    return { errors: [{ path: err.path, errors: err.errors }] };\n                }\n                const errors = err.inner.reduce((acc, curr) => {\n                    const path = curr.path || '';\n                    if (!acc[path]) {\n                        acc[path] = { errors: [], path };\n                    }\n                    acc[path].errors.push(...curr.errors);\n                    return acc;\n                }, {});\n                return { errors: Object.values(errors) };\n            }\n        },\n    };\n    return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const result = await typedSchema.parse(value);\n    const messages = [];\n    for (const error of result.errors) {\n        if (error.errors.length) {\n            messages.push(...error.errors);\n        }\n    }\n    return {\n        errors: messages,\n    };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n    const validator = resolveRule(rule.name);\n    if (!validator) {\n        throw new Error(`No such validator '${rule.name}' exists.`);\n    }\n    const params = fillTargetValues(rule.params, field.formData);\n    const ctx = {\n        field: field.label || field.name,\n        name: field.name,\n        label: field.label,\n        value,\n        form: field.formData,\n        rule: Object.assign(Object.assign({}, rule), { params }),\n    };\n    const result = await validator(value, params, ctx);\n    if (typeof result === 'string') {\n        return {\n            error: result,\n        };\n    }\n    return {\n        error: result ? undefined : _generateFieldError(ctx),\n    };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n    const message = getConfig().generateMessage;\n    if (!message) {\n        return 'Field is invalid';\n    }\n    return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n    const normalize = (value) => {\n        if (isLocator(value)) {\n            return value(crossTable);\n        }\n        return value;\n    };\n    if (Array.isArray(params)) {\n        return params.map(normalize);\n    }\n    return Object.keys(params).reduce((acc, param) => {\n        acc[param] = normalize(params[param]);\n        return acc;\n    }, {});\n}\nasync function validateTypedSchema(schema, values) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const validationResult = await typedSchema.parse(klona(values));\n    const results = {};\n    const errors = {};\n    for (const error of validationResult.errors) {\n        const messages = error.errors;\n        // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n        const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n            return `[${m}]`;\n        });\n        results[path] = { valid: !messages.length, errors: messages };\n        if (messages.length) {\n            errors[path] = messages[0];\n        }\n    }\n    return {\n        valid: !validationResult.errors.length,\n        results,\n        errors,\n        values: validationResult.value,\n    };\n}\nasync function validateObjectSchema(schema, values, opts) {\n    const paths = keysOf(schema);\n    const validations = paths.map(async (path) => {\n        var _a, _b, _c;\n        const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\n            name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n            label: strings === null || strings === void 0 ? void 0 : strings.label,\n            values: values,\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\n        });\n        return Object.assign(Object.assign({}, fieldResult), { path });\n    });\n    let isAllValid = true;\n    const validationResults = await Promise.all(validations);\n    const results = {};\n    const errors = {};\n    for (const result of validationResults) {\n        results[result.path] = {\n            valid: result.valid,\n            errors: result.errors,\n        };\n        if (!result.valid) {\n            isAllValid = false;\n            errors[result.path] = result.errors[0];\n        }\n    }\n    return {\n        valid: isAllValid,\n        results,\n        errors,\n    };\n}\n\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\n    if (!init.form) {\n        const { errors, setErrors } = createFieldErrors();\n        const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n        const meta = createFieldMeta(value, initialValue, errors);\n        function setState(state) {\n            var _a;\n            if ('value' in state) {\n                value.value = state.value;\n            }\n            if ('errors' in state) {\n                setErrors(state.errors);\n            }\n            if ('touched' in state) {\n                meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n            }\n            if ('initialValue' in state) {\n                setInitialValue(state.initialValue);\n            }\n        }\n        return {\n            id,\n            path,\n            value,\n            initialValue,\n            meta,\n            flags: { pendingUnmount: { [id]: false }, pendingReset: false },\n            errors,\n            setState,\n        };\n    }\n    const state = init.form.createPathState(path, {\n        bails: init.bails,\n        label: init.label,\n        type: init.type,\n        validate: init.validate,\n    });\n    const errors = computed(() => state.errors);\n    function setState(state) {\n        var _a, _b, _c;\n        if ('value' in state) {\n            value.value = state.value;\n        }\n        if ('errors' in state) {\n            (_a = init.form) === null || _a === void 0 ? void 0 : _a.setFieldError(unref(path), state.errors);\n        }\n        if ('touched' in state) {\n            (_b = init.form) === null || _b === void 0 ? void 0 : _b.setFieldTouched(unref(path), (_c = state.touched) !== null && _c !== void 0 ? _c : false);\n        }\n        if ('initialValue' in state) {\n            setInitialValue(state.initialValue);\n        }\n    }\n    return {\n        id: Array.isArray(state.id) ? state.id[state.id.length - 1] : state.id,\n        path,\n        value,\n        errors,\n        meta: state,\n        initialValue,\n        flags: state.__flags,\n        setState,\n    };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n    const modelRef = ref(unref(modelValue));\n    function resolveInitialValue() {\n        if (!form) {\n            return unref(modelRef);\n        }\n        return getFromPath(form.initialValues.value, unref(path), unref(modelRef));\n    }\n    function setInitialValue(value) {\n        if (!form) {\n            modelRef.value = value;\n            return;\n        }\n        form.stageInitialValue(unref(path), value, true);\n    }\n    const initialValue = computed(resolveInitialValue);\n    // if no form is associated, use a regular ref.\n    if (!form) {\n        const value = ref(resolveInitialValue());\n        return {\n            value,\n            initialValue,\n            setInitialValue,\n        };\n    }\n    // to set the initial value, first check if there is a current value, if there is then use it.\n    // otherwise use the configured initial value if it exists.\n    // prioritize model value over form values\n    // #3429\n    const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n    form.stageInitialValue(unref(path), currentValue, true);\n    // otherwise use a computed setter that triggers the `setFieldValue`\n    const value = computed({\n        get() {\n            return getFromPath(form.values, unref(path));\n        },\n        set(newVal) {\n            form.setFieldValue(unref(path), newVal, false);\n        },\n    });\n    return {\n        value,\n        initialValue,\n        setInitialValue,\n    };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n    if (isRef(modelValue)) {\n        return unref(modelValue);\n    }\n    if (modelValue !== undefined) {\n        return modelValue;\n    }\n    return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction createFieldMeta(currentValue, initialValue, errors) {\n    const meta = reactive({\n        touched: false,\n        pending: false,\n        valid: true,\n        validated: !!unref(errors).length,\n        initialValue: computed(() => unref(initialValue)),\n        dirty: computed(() => {\n            return !isEqual(unref(currentValue), unref(initialValue));\n        }),\n    });\n    watch(errors, value => {\n        meta.valid = !value.length;\n    }, {\n        immediate: true,\n        flush: 'sync',\n    });\n    return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction createFieldErrors() {\n    const errors = ref([]);\n    return {\n        errors,\n        setErrors: (messages) => {\n            errors.value = normalizeErrorItem(messages);\n        },\n    };\n}\n\nfunction installDevtoolsPlugin(app) {\n    if ((process.env.NODE_ENV !== 'production')) {\n        setupDevtoolsPlugin({\n            id: 'vee-validate-devtools-plugin',\n            label: 'VeeValidate Plugin',\n            packageName: 'vee-validate',\n            homepage: 'https://vee-validate.logaretm.com/v4',\n            app,\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\n        }, setupApiHooks);\n    }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n    setTimeout(async () => {\n        await nextTick();\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n    }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FORMS[form.formId];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FIELDS[field.id];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n    error: 0xbd4b4b,\n    success: 0x06d77b,\n    unknown: 0x54436b,\n    white: 0xffffff,\n    black: 0x000000,\n    blue: 0x035397,\n    purple: 0xb980f0,\n    orange: 0xf5a962,\n    gray: 0xbbbfca,\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n    API = api;\n    api.addInspector({\n        id: INSPECTOR_ID,\n        icon: 'rule',\n        label: 'vee-validate',\n        noSelectionText: 'Select a vee-validate node to inspect',\n        actions: [\n            {\n                icon: 'done_outline',\n                tooltip: 'Validate selected item',\n                action: async () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        await SELECTED_NODE.field.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        await SELECTED_NODE.form.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        await SELECTED_NODE.form.validateField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n            {\n                icon: 'delete_sweep',\n                tooltip: 'Clear validation state of the selected item',\n                action: () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        SELECTED_NODE.field.resetField();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        SELECTED_NODE.form.resetForm();\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        SELECTED_NODE.form.resetField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n        ],\n    });\n    api.on.getInspectorTree(payload => {\n        if (payload.inspectorId !== INSPECTOR_ID) {\n            return;\n        }\n        const forms = Object.values(DEVTOOLS_FORMS);\n        const fields = Object.values(DEVTOOLS_FIELDS);\n        payload.rootNodes = [\n            ...forms.map(mapFormForDevtoolsInspector),\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\n        ];\n    });\n    api.on.getInspectorState((payload, ctx) => {\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n            return;\n        }\n        const { form, field, state, type } = decodeNodeId(payload.nodeId);\n        if (form && type === 'form') {\n            payload.state = buildFormState(form);\n            SELECTED_NODE = { type: 'form', form };\n            return;\n        }\n        if (state && type === 'pathState' && form) {\n            payload.state = buildFieldState(state);\n            SELECTED_NODE = { type: 'pathState', state, form };\n            return;\n        }\n        if (field && type === 'field') {\n            payload.state = buildFieldState({\n                errors: field.errors.value,\n                dirty: field.meta.dirty,\n                valid: field.meta.valid,\n                touched: field.meta.touched,\n                value: field.value.value,\n                initialValue: field.meta.initialValue,\n            });\n            SELECTED_NODE = { field, type: 'field' };\n            return;\n        }\n        SELECTED_NODE = null;\n    });\n}\nfunction mapFormForDevtoolsInspector(form) {\n    const { textColor, bgColor } = getValidityColors(form.meta.value.valid);\n    const formTreeNodes = {};\n    Object.values(form.getAllPathStates()).forEach(state => {\n        setInPath(formTreeNodes, unref(state.path), mapPathForDevtoolsInspector(state, form));\n    });\n    function buildFormTree(tree, path = []) {\n        const key = [...path].pop();\n        if ('id' in tree) {\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\n        }\n        if (isObject(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: key || '',\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\n            };\n        }\n        if (Array.isArray(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: `${key}[]`,\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\n            };\n        }\n        return { id: '', label: '', children: [] };\n    }\n    const { children } = buildFormTree(formTreeNodes);\n    return {\n        id: encodeNodeId(form),\n        label: 'Form',\n        children,\n        tags: [\n            {\n                label: 'Form',\n                textColor,\n                backgroundColor: bgColor,\n            },\n            {\n                label: `${form.getAllPathStates().length} fields`,\n                textColor: COLORS.white,\n                backgroundColor: COLORS.unknown,\n            },\n        ],\n    };\n}\nfunction mapPathForDevtoolsInspector(state, form) {\n    return {\n        id: encodeNodeId(form, state),\n        label: unref(state.path),\n        tags: getFieldNodeTags(state.multiple, state.fieldsCount, state.type, state.valid, form),\n    };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n    return {\n        id: encodeNodeId(form, field),\n        label: unref(field.name),\n        tags: getFieldNodeTags(false, 1, field.type, field.meta.valid, form),\n    };\n}\nfunction getFieldNodeTags(multiple, fieldsCount, type, valid, form) {\n    const { textColor, bgColor } = getValidityColors(valid);\n    return [\n        multiple\n            ? undefined\n            : {\n                label: 'Field',\n                textColor,\n                backgroundColor: bgColor,\n            },\n        !form\n            ? {\n                label: 'Standalone',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.gray,\n            }\n            : undefined,\n        type === 'checkbox'\n            ? {\n                label: 'Checkbox',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.blue,\n            }\n            : undefined,\n        type === 'radio'\n            ? {\n                label: 'Radio',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.purple,\n            }\n            : undefined,\n        multiple\n            ? {\n                label: 'Multiple',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.orange,\n            }\n            : undefined,\n    ].filter(Boolean);\n}\nfunction encodeNodeId(form, stateOrField) {\n    const type = stateOrField ? ('path' in stateOrField ? 'pathState' : 'field') : 'form';\n    const fieldPath = stateOrField ? ('path' in stateOrField ? stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.path : unref(stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.name)) : '';\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, type };\n    return btoa(encodeURIComponent(JSON.stringify(idObject)));\n}\nfunction decodeNodeId(nodeId) {\n    try {\n        const idObject = JSON.parse(decodeURIComponent(atob(nodeId)));\n        const form = DEVTOOLS_FORMS[idObject.f];\n        if (!form && idObject.ff) {\n            const field = DEVTOOLS_FIELDS[idObject.ff];\n            if (!field) {\n                return {};\n            }\n            return {\n                type: idObject.type,\n                field,\n            };\n        }\n        if (!form) {\n            return {};\n        }\n        const state = form.getPathState(idObject.ff);\n        return {\n            type: idObject.type,\n            form,\n            state,\n        };\n    }\n    catch (err) {\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n    }\n    return {};\n}\nfunction buildFieldState(state) {\n    return {\n        'Field state': [\n            { key: 'errors', value: state.errors },\n            {\n                key: 'initialValue',\n                value: state.initialValue,\n            },\n            {\n                key: 'currentValue',\n                value: state.value,\n            },\n            {\n                key: 'touched',\n                value: state.touched,\n            },\n            {\n                key: 'dirty',\n                value: state.dirty,\n            },\n            {\n                key: 'valid',\n                value: state.valid,\n            },\n        ],\n    };\n}\nfunction buildFormState(form) {\n    const { errorBag, meta, values, isSubmitting, isValidating, submitCount } = form;\n    return {\n        'Form state': [\n            {\n                key: 'submitCount',\n                value: submitCount.value,\n            },\n            {\n                key: 'isSubmitting',\n                value: isSubmitting.value,\n            },\n            {\n                key: 'isValidating',\n                value: isValidating.value,\n            },\n            {\n                key: 'touched',\n                value: meta.value.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.value.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.value.valid,\n            },\n            {\n                key: 'initialValues',\n                value: meta.value.initialValues,\n            },\n            {\n                key: 'currentValues',\n                value: values,\n            },\n            {\n                key: 'errors',\n                value: keysOf(errorBag.value).reduce((acc, key) => {\n                    var _a;\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n                    if (message) {\n                        acc[key] = message;\n                    }\n                    return acc;\n                }, {}),\n            },\n        ],\n    };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getValidityColors(valid) {\n    return {\n        bgColor: valid ? COLORS.success : COLORS.error,\n        textColor: valid ? COLORS.black : COLORS.white,\n    };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n        return useFieldWithChecked(path, rules, opts);\n    }\n    return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, syncVModel, form: controlForm, } = normalizeOptions(opts);\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n    const form = controlForm || injectedForm;\n    const name = computed(() => normalizeFormPath(toValue(path)));\n    const validator = computed(() => {\n        const schema = toValue(form === null || form === void 0 ? void 0 : form.schema);\n        if (schema) {\n            return undefined;\n        }\n        const rulesValue = unref(rules);\n        if (isYupValidator(rulesValue) ||\n            isTypedSchema(rulesValue) ||\n            isCallable(rulesValue) ||\n            Array.isArray(rulesValue)) {\n            return rulesValue;\n        }\n        return normalizeRules(rulesValue);\n    });\n    const { id, value, initialValue, meta, setState, errors, flags } = useFieldState(name, {\n        modelValue,\n        form,\n        bails,\n        label,\n        type,\n        validate: validator.value ? validate$1 : undefined,\n    });\n    const errorMessage = computed(() => errors.value[0]);\n    if (syncVModel) {\n        useVModel({\n            value,\n            prop: syncVModel,\n            handleChange,\n            shouldValidate: () => validateOnValueUpdate && !flags.pendingReset,\n        });\n    }\n    /**\n     * Handles common onBlur meta update\n     */\n    const handleBlur = (evt, shouldValidate = false) => {\n        meta.touched = true;\n        if (shouldValidate) {\n            validateWithStateMutation();\n        }\n    };\n    async function validateCurrentValue(mode) {\n        var _a, _b;\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n            return (_a = (await form.validateSchema(mode)).results[toValue(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\n        }\n        if (validator.value) {\n            return validate(value.value, validator.value, {\n                name: toValue(name),\n                label: toValue(label),\n                values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n                bails,\n            });\n        }\n        return { valid: true, errors: [] };\n    }\n    const validateWithStateMutation = withLatest(async () => {\n        meta.pending = true;\n        meta.validated = true;\n        return validateCurrentValue('validated-only');\n    }, result => {\n        if (flags.pendingUnmount[field.id]) {\n            return;\n        }\n        setState({ errors: result.errors });\n        meta.pending = false;\n        meta.valid = result.valid;\n        return result;\n    });\n    const validateValidStateOnly = withLatest(async () => {\n        return validateCurrentValue('silent');\n    }, result => {\n        meta.valid = result.valid;\n        return result;\n    });\n    function validate$1(opts) {\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n            return validateValidStateOnly();\n        }\n        return validateWithStateMutation();\n    }\n    // Common input/change event handler\n    function handleChange(e, shouldValidate = true) {\n        const newValue = normalizeEventValue(e);\n        setValue(newValue, shouldValidate);\n    }\n    // Runs the initial validation\n    onMounted(() => {\n        if (validateOnMount) {\n            return validateWithStateMutation();\n        }\n        // validate self initially if no form was handling this\n        // forms should have their own initial silent validation run to make things more efficient\n        if (!form || !form.validateSchema) {\n            validateValidStateOnly();\n        }\n    });\n    function setTouched(isTouched) {\n        meta.touched = isTouched;\n    }\n    function resetField(state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\n        setState({\n            value: klona(newValue),\n            initialValue: klona(newValue),\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\n        });\n        meta.pending = false;\n        meta.validated = false;\n        validateValidStateOnly();\n    }\n    const vm = getCurrentInstance();\n    function setValue(newValue, shouldValidate = true) {\n        value.value = vm && syncVModel ? applyModelModifiers(newValue, vm.props.modelModifiers) : newValue;\n        const validateFn = shouldValidate ? validateWithStateMutation : validateValidStateOnly;\n        validateFn();\n    }\n    function setErrors(errors) {\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\n    }\n    const valueProxy = computed({\n        get() {\n            return value.value;\n        },\n        set(newValue) {\n            setValue(newValue, validateOnValueUpdate);\n        },\n    });\n    if ((process.env.NODE_ENV !== 'production')) {\n        watch(valueProxy, (value, oldValue) => {\n            if (!isObject(value)) {\n                return;\n            }\n            if (value === oldValue && isEqual(value, oldValue)) {\n                warn$1('Detected a possible deep change on field `value` ref, for nested changes please either set the entire ref value or use `setValue` or `handleChange`.');\n            }\n        }, { deep: true });\n    }\n    const field = {\n        id,\n        name,\n        label,\n        value: valueProxy,\n        meta,\n        errors,\n        errorMessage,\n        type,\n        checkedValue,\n        uncheckedValue,\n        bails,\n        keepValueOnUnmount,\n        resetField,\n        handleReset: () => resetField(),\n        validate: validate$1,\n        handleChange,\n        handleBlur,\n        setState,\n        setTouched,\n        setErrors,\n        setValue,\n    };\n    provide(FieldContextKey, field);\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\n        watch(rules, (value, oldValue) => {\n            if (isEqual(value, oldValue)) {\n                return;\n            }\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }, {\n            deep: true,\n        });\n    }\n    if ((process.env.NODE_ENV !== 'production')) {\n        field._vm = getCurrentInstance();\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\n            deep: true,\n        });\n        if (!form) {\n            registerSingleFieldWithDevtools(field);\n        }\n    }\n    // if no associated form return the field API immediately\n    if (!form) {\n        return field;\n    }\n    // associate the field with the given form\n    // extract cross-field dependencies in a computed prop\n    const dependencies = computed(() => {\n        const rulesVal = validator.value;\n        // is falsy, a function schema or a yup schema\n        if (!rulesVal ||\n            isCallable(rulesVal) ||\n            isYupValidator(rulesVal) ||\n            isTypedSchema(rulesVal) ||\n            Array.isArray(rulesVal)) {\n            return {};\n        }\n        return Object.keys(rulesVal).reduce((acc, rule) => {\n            const deps = extractLocators(rulesVal[rule])\n                .map((dep) => dep.__locatorRef)\n                .reduce((depAcc, depName) => {\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\n                if (depValue !== undefined) {\n                    depAcc[depName] = depValue;\n                }\n                return depAcc;\n            }, {});\n            Object.assign(acc, deps);\n            return acc;\n        }, {});\n    });\n    // Adds a watcher that runs the validation whenever field dependencies change\n    watch(dependencies, (deps, oldDeps) => {\n        // Skip if no dependencies or if the field wasn't manipulated\n        if (!Object.keys(deps).length) {\n            return;\n        }\n        const shouldValidate = !isEqual(deps, oldDeps);\n        if (shouldValidate) {\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }\n    });\n    onBeforeUnmount(() => {\n        var _a;\n        const shouldKeepValue = (_a = toValue(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : toValue(form.keepValuesOnUnmount);\n        const path = toValue(name);\n        if (shouldKeepValue || !form || flags.pendingUnmount[field.id]) {\n            form === null || form === void 0 ? void 0 : form.removePathState(path, id);\n            return;\n        }\n        flags.pendingUnmount[field.id] = true;\n        const pathState = form.getPathState(path);\n        const matchesId = Array.isArray(pathState === null || pathState === void 0 ? void 0 : pathState.id) && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple)\n            ? pathState === null || pathState === void 0 ? void 0 : pathState.id.includes(field.id)\n            : (pathState === null || pathState === void 0 ? void 0 : pathState.id) === field.id;\n        if (!matchesId) {\n            return;\n        }\n        if ((pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && Array.isArray(pathState.value)) {\n            const valueIdx = pathState.value.findIndex(i => isEqual(i, toValue(field.checkedValue)));\n            if (valueIdx > -1) {\n                const newVal = [...pathState.value];\n                newVal.splice(valueIdx, 1);\n                form.setFieldValue(path, newVal);\n            }\n            if (Array.isArray(pathState.id)) {\n                pathState.id.splice(pathState.id.indexOf(field.id), 1);\n            }\n        }\n        else {\n            form.unsetPathValue(toValue(name));\n        }\n        form.removePathState(path, id);\n    });\n    return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n    const defaults = () => ({\n        initialValue: undefined,\n        validateOnMount: false,\n        bails: true,\n        label: undefined,\n        validateOnValueUpdate: true,\n        keepValueOnUnmount: undefined,\n        syncVModel: false,\n        controlled: true,\n    });\n    const isVModelSynced = !!(opts === null || opts === void 0 ? void 0 : opts.syncVModel);\n    const modelPropName = typeof (opts === null || opts === void 0 ? void 0 : opts.syncVModel) === 'string' ? opts.syncVModel : (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue';\n    const initialValue = isVModelSynced && !('initialValue' in (opts || {}))\n        ? getCurrentModelValue(getCurrentInstance(), modelPropName)\n        : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n    if (!opts) {\n        return Object.assign(Object.assign({}, defaults()), { initialValue });\n    }\n    // TODO: Deprecate this in next major release\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n    const syncVModel = (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || (opts === null || opts === void 0 ? void 0 : opts.syncVModel) || false;\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { initialValue, controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue,\n        syncVModel });\n}\nfunction useFieldWithChecked(name, rules, opts) {\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n    function patchCheckedApi(field) {\n        const handleChange = field.handleChange;\n        const checked = computed(() => {\n            const currentValue = toValue(field.value);\n            const checkedVal = toValue(checkedValue);\n            return Array.isArray(currentValue)\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\n                : isEqual(checkedVal, currentValue);\n        });\n        function handleCheckboxChange(e, shouldValidate = true) {\n            var _a, _b;\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n                if (shouldValidate) {\n                    field.validate();\n                }\n                return;\n            }\n            const path = toValue(name);\n            const pathState = form === null || form === void 0 ? void 0 : form.getPathState(path);\n            const value = normalizeEventValue(e);\n            let newValue = (_b = toValue(checkedValue)) !== null && _b !== void 0 ? _b : value;\n            if (form && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && pathState.type === 'checkbox') {\n                newValue = resolveNextCheckboxValue(getFromPath(form.values, path) || [], newValue, undefined);\n            }\n            else if ((opts === null || opts === void 0 ? void 0 : opts.type) === 'checkbox') {\n                newValue = resolveNextCheckboxValue(toValue(field.value), newValue, toValue(uncheckedValue));\n            }\n            handleChange(newValue, shouldValidate);\n        }\n        return Object.assign(Object.assign({}, field), { checked,\n            checkedValue,\n            uncheckedValue, handleChange: handleCheckboxChange });\n    }\n    return patchCheckedApi(_useField(name, rules, opts));\n}\nfunction useVModel({ prop, value, handleChange, shouldValidate }) {\n    const vm = getCurrentInstance();\n    /* istanbul ignore next */\n    if (!vm || !prop) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\n        }\n        return;\n    }\n    const propName = typeof prop === 'string' ? prop : 'modelValue';\n    const emitName = `update:${propName}`;\n    // Component doesn't have a model prop setup (must be defined on the props)\n    if (!(propName in vm.props)) {\n        return;\n    }\n    watch(value, newValue => {\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n            return;\n        }\n        vm.emit(emitName, newValue);\n    });\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\n        if (propValue === IS_ABSENT && value.value === undefined) {\n            return;\n        }\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\n        if (isEqual(newValue, value.value)) {\n            return;\n        }\n        handleChange(newValue, shouldValidate());\n    });\n}\nfunction getCurrentModelValue(vm, propName) {\n    if (!vm) {\n        return undefined;\n    }\n    return vm.props[propName];\n}\n\nconst FieldImpl = /** #__PURE__ */ defineComponent({\n    name: 'Field',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: [String, Object],\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        rules: {\n            type: [Object, String, Function],\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        validateOnBlur: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnChange: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnInput: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnModelUpdate: {\n            type: Boolean,\n            default: undefined,\n        },\n        bails: {\n            type: Boolean,\n            default: () => getConfig().bails,\n        },\n        label: {\n            type: String,\n            default: undefined,\n        },\n        uncheckedValue: {\n            type: null,\n            default: undefined,\n        },\n        modelValue: {\n            type: null,\n            default: IS_ABSENT,\n        },\n        modelModifiers: {\n            type: null,\n            default: () => ({}),\n        },\n        'onUpdate:modelValue': {\n            type: null,\n            default: undefined,\n        },\n        standalone: {\n            type: Boolean,\n            default: false,\n        },\n        keepValue: {\n            type: Boolean,\n            default: undefined,\n        },\n    },\n    setup(props, ctx) {\n        const rules = toRef(props, 'rules');\n        const name = toRef(props, 'name');\n        const label = toRef(props, 'label');\n        const uncheckedValue = toRef(props, 'uncheckedValue');\n        const keepValue = toRef(props, 'keepValue');\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\n            validateOnMount: props.validateOnMount,\n            bails: props.bails,\n            standalone: props.standalone,\n            type: ctx.attrs.type,\n            initialValue: resolveInitialValue(props, ctx),\n            // Only for checkboxes and radio buttons\n            checkedValue: ctx.attrs.value,\n            uncheckedValue,\n            label,\n            validateOnValueUpdate: props.validateOnModelUpdate,\n            keepValueOnUnmount: keepValue,\n            syncVModel: true,\n        });\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n            handleChange(e, shouldValidate);\n        };\n        const sharedProps = computed(() => {\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\n            function baseOnBlur(e) {\n                handleBlur(e, validateOnBlur);\n                if (isCallable(ctx.attrs.onBlur)) {\n                    ctx.attrs.onBlur(e);\n                }\n            }\n            function baseOnInput(e) {\n                onChangeHandler(e, validateOnInput);\n                if (isCallable(ctx.attrs.onInput)) {\n                    ctx.attrs.onInput(e);\n                }\n            }\n            function baseOnChange(e) {\n                onChangeHandler(e, validateOnChange);\n                if (isCallable(ctx.attrs.onChange)) {\n                    ctx.attrs.onChange(e);\n                }\n            }\n            const attrs = {\n                name: props.name,\n                onBlur: baseOnBlur,\n                onInput: baseOnInput,\n                onChange: baseOnChange,\n            };\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n            return attrs;\n        });\n        const fieldProps = computed(() => {\n            const attrs = Object.assign({}, sharedProps.value);\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\n                attrs.checked = checked.value;\n            }\n            const tag = resolveTag(props, ctx);\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\n                attrs.value = value.value;\n            }\n            return attrs;\n        });\n        const componentProps = computed(() => {\n            return Object.assign(Object.assign({}, sharedProps.value), { modelValue: value.value });\n        });\n        function slotProps() {\n            return {\n                field: fieldProps.value,\n                componentField: componentProps.value,\n                value: value.value,\n                meta,\n                errors: errors.value,\n                errorMessage: errorMessage.value,\n                validate: validateField,\n                resetField,\n                handleChange: onChangeHandler,\n                handleInput: e => onChangeHandler(e, false),\n                handleReset,\n                handleBlur: sharedProps.value.onBlur,\n                setTouched,\n                setErrors,\n            };\n        }\n        ctx.expose({\n            setErrors,\n            setTouched,\n            reset: resetField,\n            validate: validateField,\n            handleChange,\n        });\n        return () => {\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (tag) {\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n            }\n            return children;\n        };\n    },\n});\nfunction resolveTag(props, ctx) {\n    let tag = props.as || '';\n    if (!props.as && !ctx.slots.default) {\n        tag = 'input';\n    }\n    return tag;\n}\nfunction resolveValidationTriggers(props) {\n    var _a, _b, _c, _d;\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\n    return {\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\n    };\n}\nfunction resolveInitialValue(props, ctx) {\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n    if (!hasCheckedAttr(ctx.attrs.type)) {\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n    }\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\nconst PRIVATE_PATH_STATE_KEYS = ['bails', 'fieldsCount', 'id', 'multiple', 'type', 'validate'];\nfunction resolveInitialValues(opts) {\n    const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n    const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n    if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n        return klona(schema.cast(providedValues) || {});\n    }\n    return klona(providedValues);\n}\nfunction useForm(opts) {\n    var _a;\n    const formId = FORM_COUNTER++;\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n    let FIELD_ID_COUNTER = 0;\n    // If the form is currently submitting\n    const isSubmitting = ref(false);\n    // If the form is currently validating\n    const isValidating = ref(false);\n    // The number of times the user tried to submit the form\n    const submitCount = ref(0);\n    // field arrays managed by this form\n    const fieldArrays = [];\n    // a private ref for all form values\n    const formValues = reactive(resolveInitialValues(opts));\n    const pathStates = ref([]);\n    const extraErrorsBag = ref({});\n    const pathStateLookup = ref({});\n    const rebuildPathLookup = debounceNextTick(() => {\n        pathStateLookup.value = pathStates.value.reduce((names, state) => {\n            names[normalizeFormPath(toValue(state.path))] = state;\n            return names;\n        }, {});\n    });\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldError(field, message) {\n        const state = findPathState(field);\n        if (!state) {\n            if (typeof field === 'string') {\n                extraErrorsBag.value[normalizeFormPath(field)] = normalizeErrorItem(message);\n            }\n            return;\n        }\n        // Move the error from the extras path if exists\n        if (typeof field === 'string') {\n            const normalizedPath = normalizeFormPath(field);\n            if (extraErrorsBag.value[normalizedPath]) {\n                delete extraErrorsBag.value[normalizedPath];\n            }\n        }\n        state.errors = normalizeErrorItem(message);\n        state.valid = !state.errors.length;\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrors(paths) {\n        keysOf(paths).forEach(path => {\n            setFieldError(path, paths[path]);\n        });\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n        setErrors(opts.initialErrors);\n    }\n    const errorBag = computed(() => {\n        const pathErrors = pathStates.value.reduce((acc, state) => {\n            if (state.errors.length) {\n                acc[state.path] = state.errors;\n            }\n            return acc;\n        }, {});\n        return Object.assign(Object.assign({}, extraErrorsBag.value), pathErrors);\n    });\n    // Gets the first error of each field\n    const errors = computed(() => {\n        return keysOf(errorBag.value).reduce((acc, key) => {\n            const errors = errorBag.value[key];\n            if (errors === null || errors === void 0 ? void 0 : errors.length) {\n                acc[key] = errors[0];\n            }\n            return acc;\n        }, {});\n    });\n    /**\n     * Holds a computed reference to all fields names and labels\n     */\n    const fieldNames = computed(() => {\n        return pathStates.value.reduce((names, state) => {\n            names[state.path] = { name: state.path || '', label: state.label || '' };\n            return names;\n        }, {});\n    });\n    const fieldBailsMap = computed(() => {\n        return pathStates.value.reduce((map, state) => {\n            var _a;\n            map[state.path] = (_a = state.bails) !== null && _a !== void 0 ? _a : true;\n            return map;\n        }, {});\n    });\n    // mutable non-reactive reference to initial errors\n    // we need this to process initial errors then unset them\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n    // initial form values\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(pathStates, formValues, opts);\n    // form meta aggregations\n    const meta = useFormMeta(pathStates, formValues, originalInitialValues, errors);\n    const controlledValues = computed(() => {\n        return pathStates.value.reduce((acc, state) => {\n            const value = getFromPath(formValues, state.path);\n            setInPath(acc, state.path, value);\n            return acc;\n        }, {});\n    });\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n    function createPathState(path, config) {\n        var _a, _b;\n        const initialValue = computed(() => getFromPath(initialValues.value, toValue(path)));\n        const pathStateExists = pathStateLookup.value[toValue(path)];\n        if (pathStateExists) {\n            if ((config === null || config === void 0 ? void 0 : config.type) === 'checkbox' || (config === null || config === void 0 ? void 0 : config.type) === 'radio') {\n                pathStateExists.multiple = true;\n            }\n            const id = FIELD_ID_COUNTER++;\n            if (Array.isArray(pathStateExists.id)) {\n                pathStateExists.id.push(id);\n            }\n            else {\n                pathStateExists.id = [pathStateExists.id, id];\n            }\n            pathStateExists.fieldsCount++;\n            pathStateExists.__flags.pendingUnmount[id] = false;\n            return pathStateExists;\n        }\n        const currentValue = computed(() => getFromPath(formValues, toValue(path)));\n        const pathValue = toValue(path);\n        const id = FIELD_ID_COUNTER++;\n        const state = reactive({\n            id,\n            path,\n            touched: false,\n            pending: false,\n            valid: true,\n            validated: !!((_a = initialErrors[pathValue]) === null || _a === void 0 ? void 0 : _a.length),\n            initialValue,\n            errors: shallowRef([]),\n            bails: (_b = config === null || config === void 0 ? void 0 : config.bails) !== null && _b !== void 0 ? _b : false,\n            label: config === null || config === void 0 ? void 0 : config.label,\n            type: (config === null || config === void 0 ? void 0 : config.type) || 'default',\n            value: currentValue,\n            multiple: false,\n            __flags: {\n                pendingUnmount: { [id]: false },\n                pendingReset: false,\n            },\n            fieldsCount: 1,\n            validate: config === null || config === void 0 ? void 0 : config.validate,\n            dirty: computed(() => {\n                return !isEqual(unref(currentValue), unref(initialValue));\n            }),\n        });\n        pathStates.value.push(state);\n        pathStateLookup.value[pathValue] = state;\n        rebuildPathLookup();\n        if (errors.value[pathValue] && !initialErrors[pathValue]) {\n            nextTick(() => {\n                validateField(pathValue, { mode: 'silent' });\n            });\n        }\n        // Handles when a path changes\n        if (isRef(path)) {\n            watch(path, newPath => {\n                rebuildPathLookup();\n                const nextValue = klona(currentValue.value);\n                pathStateLookup.value[newPath] = state;\n                nextTick(() => {\n                    setInPath(formValues, newPath, nextValue);\n                });\n            });\n        }\n        return state;\n    }\n    /**\n     * Batches validation runs in 5ms batches\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\n     */\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\n    const validateSchema = withLatest(async (mode) => {\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n    }, (formResult, [mode]) => {\n        // fields by id lookup\n        // errors fields names, we need it to also check if custom errors are updated\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n        // collect all the keys from the schema and all fields\n        // this ensures we have a complete key map of all the fields\n        const paths = [\n            ...new Set([...keysOf(formResult.results), ...pathStates.value.map(p => p.path), ...currentErrorsPaths]),\n        ].sort();\n        // aggregates the paths into a single result object while applying the results on the fields\n        return paths.reduce((validation, _path) => {\n            const path = _path;\n            const pathState = findPathState(path) || findHoistedPath(path);\n            const messages = (formResult.results[path] || { errors: [] }).errors;\n            const fieldResult = {\n                errors: messages,\n                valid: !messages.length,\n            };\n            validation.results[path] = fieldResult;\n            if (!fieldResult.valid) {\n                validation.errors[path] = fieldResult.errors[0];\n            }\n            // clean up extra errors if path state exists\n            if (pathState && extraErrorsBag.value[path]) {\n                delete extraErrorsBag.value[path];\n            }\n            // field not rendered\n            if (!pathState) {\n                setFieldError(path, messages);\n                return validation;\n            }\n            // always update the valid flag regardless of the mode\n            pathState.valid = fieldResult.valid;\n            if (mode === 'silent') {\n                return validation;\n            }\n            if (mode === 'validated-only' && !pathState.validated) {\n                return validation;\n            }\n            setFieldError(pathState, fieldResult.errors);\n            return validation;\n        }, { valid: formResult.valid, results: {}, errors: {} });\n    });\n    function mutateAllPathState(mutation) {\n        pathStates.value.forEach(mutation);\n    }\n    function findPathState(path) {\n        const normalizedPath = typeof path === 'string' ? normalizeFormPath(path) : path;\n        const pathState = typeof normalizedPath === 'string' ? pathStateLookup.value[normalizedPath] : normalizedPath;\n        return pathState;\n    }\n    function findHoistedPath(path) {\n        const candidates = pathStates.value.filter(state => path.startsWith(state.path));\n        return candidates.reduce((bestCandidate, candidate) => {\n            if (!bestCandidate) {\n                return candidate;\n            }\n            return (candidate.path.length > bestCandidate.path.length ? candidate : bestCandidate);\n        }, undefined);\n    }\n    let UNSET_BATCH = [];\n    let PENDING_UNSET;\n    function unsetPathValue(path) {\n        UNSET_BATCH.push(path);\n        if (!PENDING_UNSET) {\n            PENDING_UNSET = nextTick(() => {\n                const sortedPaths = [...UNSET_BATCH].sort().reverse();\n                sortedPaths.forEach(p => {\n                    unsetPath(formValues, p);\n                });\n                UNSET_BATCH = [];\n                PENDING_UNSET = null;\n            });\n        }\n        return PENDING_UNSET;\n    }\n    function makeSubmissionFactory(onlyControlled) {\n        return function submitHandlerFactory(fn, onValidationError) {\n            return function submissionHandler(e) {\n                if (e instanceof Event) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                // Touch all fields\n                mutateAllPathState(s => (s.touched = true));\n                isSubmitting.value = true;\n                submitCount.value++;\n                return validate()\n                    .then(result => {\n                    const values = klona(formValues);\n                    if (result.valid && typeof fn === 'function') {\n                        const controlled = klona(controlledValues.value);\n                        let submittedValues = (onlyControlled ? controlled : values);\n                        if (result.values) {\n                            submittedValues = result.values;\n                        }\n                        return fn(submittedValues, {\n                            evt: e,\n                            controlledValues: controlled,\n                            setErrors,\n                            setFieldError,\n                            setTouched,\n                            setFieldTouched,\n                            setValues,\n                            setFieldValue,\n                            resetForm,\n                            resetField,\n                        });\n                    }\n                    if (!result.valid && typeof onValidationError === 'function') {\n                        onValidationError({\n                            values,\n                            evt: e,\n                            errors: result.errors,\n                            results: result.results,\n                        });\n                    }\n                })\n                    .then(returnVal => {\n                    isSubmitting.value = false;\n                    return returnVal;\n                }, err => {\n                    isSubmitting.value = false;\n                    // re-throw the err so it doesn't go silent\n                    throw err;\n                });\n            };\n        };\n    }\n    const handleSubmitImpl = makeSubmissionFactory(false);\n    const handleSubmit = handleSubmitImpl;\n    handleSubmit.withControlled = makeSubmissionFactory(true);\n    function removePathState(path, id) {\n        const idx = pathStates.value.findIndex(s => s.path === path);\n        const pathState = pathStates.value[idx];\n        if (idx === -1 || !pathState) {\n            return;\n        }\n        nextTick(() => {\n            validateField(path, { mode: 'silent', warn: false });\n        });\n        if (pathState.multiple && pathState.fieldsCount) {\n            pathState.fieldsCount--;\n        }\n        if (Array.isArray(pathState.id)) {\n            const idIndex = pathState.id.indexOf(id);\n            if (idIndex >= 0) {\n                pathState.id.splice(idIndex, 1);\n            }\n            delete pathState.__flags.pendingUnmount[id];\n        }\n        if (!pathState.multiple || pathState.fieldsCount <= 0) {\n            pathStates.value.splice(idx, 1);\n            unsetInitialValue(path);\n            rebuildPathLookup();\n            delete pathStateLookup.value[path];\n        }\n    }\n    function markForUnmount(path) {\n        return mutateAllPathState(s => {\n            if (s.path.startsWith(path)) {\n                keysOf(s.__flags.pendingUnmount).forEach(id => {\n                    s.__flags.pendingUnmount[id] = true;\n                });\n            }\n        });\n    }\n    const formCtx = {\n        formId,\n        values: formValues,\n        controlledValues,\n        errorBag,\n        errors,\n        schema,\n        submitCount,\n        meta,\n        isSubmitting,\n        isValidating,\n        fieldArrays,\n        keepValuesOnUnmount,\n        validateSchema: unref(schema) ? validateSchema : undefined,\n        validate,\n        setFieldError,\n        validateField,\n        setFieldValue,\n        setValues,\n        setErrors,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        handleSubmit,\n        stageInitialValue,\n        unsetInitialValue,\n        setFieldInitialValue,\n        useFieldModel,\n        createPathState,\n        getPathState: findPathState,\n        unsetPathValue,\n        removePathState,\n        initialValues: initialValues,\n        getAllPathStates: () => pathStates.value,\n        markForUnmount,\n        isFieldTouched,\n        isFieldDirty,\n        isFieldValid,\n    };\n    /**\n     * Sets a single field value\n     */\n    function setFieldValue(field, value, shouldValidate = true) {\n        const clonedValue = klona(value);\n        const path = typeof field === 'string' ? field : field.path;\n        const pathState = findPathState(path);\n        if (!pathState) {\n            createPathState(path);\n        }\n        setInPath(formValues, path, clonedValue);\n        if (shouldValidate) {\n            validateField(path);\n        }\n    }\n    function forceSetValues(fields, shouldValidate = true) {\n        // clean up old values\n        keysOf(formValues).forEach(key => {\n            delete formValues[key];\n        });\n        // set up new values\n        keysOf(fields).forEach(path => {\n            setFieldValue(path, fields[path], false);\n        });\n        if (shouldValidate) {\n            validate();\n        }\n    }\n    /**\n     * Sets multiple fields values\n     */\n    function setValues(fields, shouldValidate = true) {\n        merge(formValues, fields);\n        // regenerate the arrays when the form values change\n        fieldArrays.forEach(f => f && f.reset());\n        if (shouldValidate) {\n            validate();\n        }\n    }\n    function createModel(path) {\n        const pathState = findPathState(unref(path)) || createPathState(path);\n        return computed({\n            get() {\n                return pathState.value;\n            },\n            set(value) {\n                const pathValue = unref(path);\n                setFieldValue(pathValue, value, false);\n                pathState.validated = true;\n                pathState.pending = true;\n                validateField(pathValue).then(() => {\n                    pathState.pending = false;\n                });\n            },\n        });\n    }\n    function useFieldModel(pathOrPaths) {\n        if (!Array.isArray(pathOrPaths)) {\n            return createModel(pathOrPaths);\n        }\n        return pathOrPaths.map(createModel);\n    }\n    /**\n     * Sets the touched meta state on a field\n     */\n    function setFieldTouched(field, isTouched) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            pathState.touched = isTouched;\n        }\n    }\n    function isFieldTouched(field) {\n        var _a;\n        return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.touched);\n    }\n    function isFieldDirty(field) {\n        var _a;\n        return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.dirty);\n    }\n    function isFieldValid(field) {\n        var _a;\n        return !!((_a = findPathState(field)) === null || _a === void 0 ? void 0 : _a.valid);\n    }\n    /**\n     * Sets the touched meta state on multiple fields\n     */\n    function setTouched(fields) {\n        if (typeof fields === 'boolean') {\n            mutateAllPathState(state => {\n                state.touched = fields;\n            });\n            return;\n        }\n        keysOf(fields).forEach(field => {\n            setFieldTouched(field, !!fields[field]);\n        });\n    }\n    function resetField(field, state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : getFromPath(initialValues.value, field);\n        const pathState = findPathState(field);\n        if (pathState) {\n            pathState.__flags.pendingReset = true;\n        }\n        setFieldInitialValue(field, klona(newValue));\n        setFieldValue(field, newValue, false);\n        setFieldTouched(field, (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false);\n        setFieldError(field, (state === null || state === void 0 ? void 0 : state.errors) || []);\n        nextTick(() => {\n            if (pathState) {\n                pathState.__flags.pendingReset = false;\n            }\n        });\n    }\n    /**\n     * Resets all fields\n     */\n    function resetForm(resetState, opts) {\n        let newValues = (resetState === null || resetState === void 0 ? void 0 : resetState.values) ? resetState.values : originalInitialValues.value;\n        newValues = isTypedSchema(schema) && isCallable(schema.cast) ? schema.cast(newValues) : newValues;\n        setInitialValues(newValues);\n        mutateAllPathState(state => {\n            var _a;\n            state.__flags.pendingReset = true;\n            state.validated = false;\n            state.touched = ((_a = resetState === null || resetState === void 0 ? void 0 : resetState.touched) === null || _a === void 0 ? void 0 : _a[state.path]) || false;\n            setFieldValue(state.path, getFromPath(newValues, state.path), false);\n            setFieldError(state.path, undefined);\n        });\n        (opts === null || opts === void 0 ? void 0 : opts.force) ? forceSetValues(newValues, false) : setValues(newValues, false);\n        setErrors((resetState === null || resetState === void 0 ? void 0 : resetState.errors) || {});\n        submitCount.value = (resetState === null || resetState === void 0 ? void 0 : resetState.submitCount) || 0;\n        nextTick(() => {\n            validate({ mode: 'silent' });\n            mutateAllPathState(state => {\n                state.__flags.pendingReset = false;\n            });\n        });\n    }\n    async function validate(opts) {\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n        if (mode === 'force') {\n            mutateAllPathState(f => (f.validated = true));\n        }\n        if (formCtx.validateSchema) {\n            return formCtx.validateSchema(mode);\n        }\n        isValidating.value = true;\n        // No schema, each field is responsible to validate itself\n        const validations = await Promise.all(pathStates.value.map(state => {\n            if (!state.validate) {\n                return Promise.resolve({\n                    key: state.path,\n                    valid: true,\n                    errors: [],\n                });\n            }\n            return state.validate(opts).then((result) => {\n                return {\n                    key: state.path,\n                    valid: result.valid,\n                    errors: result.errors,\n                };\n            });\n        }));\n        isValidating.value = false;\n        const results = {};\n        const errors = {};\n        for (const validation of validations) {\n            results[validation.key] = {\n                valid: validation.valid,\n                errors: validation.errors,\n            };\n            if (validation.errors.length) {\n                errors[validation.key] = validation.errors[0];\n            }\n        }\n        return {\n            valid: validations.every(r => r.valid),\n            results,\n            errors,\n        };\n    }\n    async function validateField(path, opts) {\n        var _a;\n        const state = findPathState(path);\n        if (state && (opts === null || opts === void 0 ? void 0 : opts.mode) !== 'silent') {\n            state.validated = true;\n        }\n        if (schema) {\n            const { results } = await validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'validated-only');\n            return results[path] || { errors: [], valid: true };\n        }\n        if (state === null || state === void 0 ? void 0 : state.validate) {\n            return state.validate(opts);\n        }\n        const shouldWarn = !state && ((_a = opts === null || opts === void 0 ? void 0 : opts.warn) !== null && _a !== void 0 ? _a : true);\n        if (shouldWarn) {\n            if ((process.env.NODE_ENV !== 'production')) {\n                warn$1(`field with path ${path} was not found`);\n            }\n        }\n        return Promise.resolve({ errors: [], valid: true });\n    }\n    function unsetInitialValue(path) {\n        unsetPath(initialValues.value, path);\n    }\n    /**\n     * Sneaky function to set initial field values\n     */\n    function stageInitialValue(path, value, updateOriginal = false) {\n        setFieldInitialValue(path, value);\n        setInPath(formValues, path, value);\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    function setFieldInitialValue(path, value) {\n        setInPath(initialValues.value, path, klona(value));\n    }\n    async function _validateSchema() {\n        const schemaValue = unref(schema);\n        if (!schemaValue) {\n            return { valid: true, results: {}, errors: {} };\n        }\n        isValidating.value = true;\n        const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue)\n            ? await validateTypedSchema(schemaValue, formValues)\n            : await validateObjectSchema(schemaValue, formValues, {\n                names: fieldNames.value,\n                bailsMap: fieldBailsMap.value,\n            });\n        isValidating.value = false;\n        return formResult;\n    }\n    const submitForm = handleSubmit((_, { evt }) => {\n        if (isFormSubmitEvent(evt)) {\n            evt.target.submit();\n        }\n    });\n    // Trigger initial validation\n    onMounted(() => {\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n            setErrors(opts.initialErrors);\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n            setTouched(opts.initialTouched);\n        }\n        // if validate on mount was enabled\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n            validate();\n            return;\n        }\n        // otherwise run initial silent validation through schema if available\n        // the useField should skip their own silent validation if a yup schema is present\n        if (formCtx.validateSchema) {\n            formCtx.validateSchema('silent');\n        }\n    });\n    if (isRef(schema)) {\n        watch(schema, () => {\n            var _a;\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n        });\n    }\n    // Provide injections\n    provide(FormContextKey, formCtx);\n    if ((process.env.NODE_ENV !== 'production')) {\n        registerFormWithDevTools(formCtx);\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, isValidating: isValidating.value, submitCount: submitCount.value })), refreshInspector, {\n            deep: true,\n        });\n    }\n    function defineComponentBinds(path, config) {\n        const pathState = findPathState(toValue(path)) || createPathState(path);\n        const evalConfig = () => (isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {});\n        function onBlur() {\n            var _a;\n            pathState.touched = true;\n            const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n            if (validateOnBlur) {\n                validateField(pathState.path);\n            }\n        }\n        function onUpdateModelValue(value) {\n            var _a;\n            const validateOnModelUpdate = (_a = evalConfig().validateOnModelUpdate) !== null && _a !== void 0 ? _a : getConfig().validateOnModelUpdate;\n            setFieldValue(pathState.path, value, validateOnModelUpdate);\n        }\n        const props = computed(() => {\n            if (isCallable(config)) {\n                const configVal = config(pathState);\n                const model = configVal.model || 'modelValue';\n                return Object.assign({ onBlur, [model]: pathState.value, [`onUpdate:${model}`]: onUpdateModelValue }, (configVal.props || {}));\n            }\n            const model = (config === null || config === void 0 ? void 0 : config.model) || 'modelValue';\n            const base = {\n                onBlur,\n                [model]: pathState.value,\n                [`onUpdate:${model}`]: onUpdateModelValue,\n            };\n            if (config === null || config === void 0 ? void 0 : config.mapProps) {\n                return Object.assign(Object.assign({}, base), config.mapProps(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n            }\n            return base;\n        });\n        return props;\n    }\n    function defineInputBinds(path, config) {\n        const pathState = (findPathState(toValue(path)) || createPathState(path));\n        const evalConfig = () => (isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {});\n        function onBlur() {\n            var _a;\n            pathState.touched = true;\n            const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n            if (validateOnBlur) {\n                validateField(pathState.path);\n            }\n        }\n        function onInput(e) {\n            var _a;\n            const value = normalizeEventValue(e);\n            const validateOnInput = (_a = evalConfig().validateOnInput) !== null && _a !== void 0 ? _a : getConfig().validateOnInput;\n            setFieldValue(pathState.path, value, validateOnInput);\n        }\n        function onChange(e) {\n            var _a;\n            const value = normalizeEventValue(e);\n            const validateOnChange = (_a = evalConfig().validateOnChange) !== null && _a !== void 0 ? _a : getConfig().validateOnChange;\n            setFieldValue(pathState.path, value, validateOnChange);\n        }\n        const props = computed(() => {\n            const base = {\n                value: pathState.value,\n                onChange,\n                onInput,\n                onBlur,\n            };\n            if (isCallable(config)) {\n                return Object.assign(Object.assign({}, base), (config(omit(pathState, PRIVATE_PATH_STATE_KEYS)).attrs || {}));\n            }\n            if (config === null || config === void 0 ? void 0 : config.mapAttrs) {\n                return Object.assign(Object.assign({}, base), config.mapAttrs(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n            }\n            return base;\n        });\n        return props;\n    }\n    return Object.assign(Object.assign({}, formCtx), { values: readonly(formValues), handleReset: () => resetForm(), submitForm,\n        defineComponentBinds,\n        defineInputBinds });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(pathsState, currentValues, initialValues, errors) {\n    const MERGE_STRATEGIES = {\n        touched: 'some',\n        pending: 'some',\n        valid: 'every',\n    };\n    const isDirty = computed(() => {\n        return !isEqual(currentValues, unref(initialValues));\n    });\n    function calculateFlags() {\n        const states = pathsState.value;\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n            const mergeMethod = MERGE_STRATEGIES[flag];\n            acc[flag] = states[mergeMethod](s => s[flag]);\n            return acc;\n        }, {});\n    }\n    const flags = reactive(calculateFlags());\n    watchEffect(() => {\n        const value = calculateFlags();\n        flags.touched = value.touched;\n        flags.valid = value.valid;\n        flags.pending = value.pending;\n    });\n    return computed(() => {\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\n    });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(pathsState, formValues, opts) {\n    const values = resolveInitialValues(opts);\n    const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n    // these are the mutable initial values as the fields are mounted/unmounted\n    const initialValues = ref(values);\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n    // so these are the values that the reset function should use\n    // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n    const originalInitialValues = ref(klona(values));\n    function setInitialValues(values, updateFields = false) {\n        initialValues.value = merge(klona(initialValues.value) || {}, klona(values));\n        originalInitialValues.value = merge(klona(originalInitialValues.value) || {}, klona(values));\n        if (!updateFields) {\n            return;\n        }\n        // update the pristine non-touched fields\n        // those are excluded because it's unlikely you want to change the form values using initial values\n        // we mostly watch them for API population or newly inserted fields\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n        pathsState.value.forEach(state => {\n            const wasTouched = state.touched;\n            if (wasTouched) {\n                return;\n            }\n            const newValue = getFromPath(initialValues.value, state.path);\n            setInPath(formValues, state.path, klona(newValue));\n        });\n    }\n    if (isRef(providedValues)) {\n        watch(providedValues, value => {\n            if (value) {\n                setInitialValues(value, true);\n            }\n        }, {\n            deep: true,\n        });\n    }\n    return {\n        initialValues,\n        originalInitialValues,\n        setInitialValues,\n    };\n}\n\nconst FormImpl = /** #__PURE__ */ defineComponent({\n    name: 'Form',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: null,\n            default: 'form',\n        },\n        validationSchema: {\n            type: Object,\n            default: undefined,\n        },\n        initialValues: {\n            type: Object,\n            default: undefined,\n        },\n        initialErrors: {\n            type: Object,\n            default: undefined,\n        },\n        initialTouched: {\n            type: Object,\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        onSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        onInvalidSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        keepValues: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, ctx) {\n        const initialValues = toRef(props, 'initialValues');\n        const validationSchema = toRef(props, 'validationSchema');\n        const keepValues = toRef(props, 'keepValues');\n        const { errors, errorBag, values, meta, isSubmitting, isValidating, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, resetField, } = useForm({\n            validationSchema: validationSchema.value ? validationSchema : undefined,\n            initialValues,\n            initialErrors: props.initialErrors,\n            initialTouched: props.initialTouched,\n            validateOnMount: props.validateOnMount,\n            keepValuesOnUnmount: keepValues,\n        });\n        const submitForm = handleSubmit((_, { evt }) => {\n            if (isFormSubmitEvent(evt)) {\n                evt.target.submit();\n            }\n        }, props.onInvalidSubmit);\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n        function handleFormReset(e) {\n            if (isEvent(e)) {\n                // Prevent default form reset behavior\n                e.preventDefault();\n            }\n            handleReset();\n            if (typeof ctx.attrs.onReset === 'function') {\n                ctx.attrs.onReset();\n            }\n        }\n        function handleScopedSlotSubmit(evt, onSubmit) {\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n        }\n        function getValues() {\n            return klona(values);\n        }\n        function getMeta() {\n            return klona(meta.value);\n        }\n        function getErrors() {\n            return klona(errors.value);\n        }\n        function slotProps() {\n            return {\n                meta: meta.value,\n                errors: errors.value,\n                errorBag: errorBag.value,\n                values,\n                isSubmitting: isSubmitting.value,\n                isValidating: isValidating.value,\n                submitCount: submitCount.value,\n                controlledValues: controlledValues.value,\n                validate,\n                validateField,\n                handleSubmit: handleScopedSlotSubmit,\n                handleReset,\n                submitForm,\n                setErrors,\n                setFieldError,\n                setFieldValue,\n                setValues,\n                setFieldTouched,\n                setTouched,\n                resetForm,\n                resetField,\n                getValues,\n                getMeta,\n                getErrors,\n            };\n        }\n        // expose these functions and methods as part of public API\n        ctx.expose({\n            setFieldError,\n            setErrors,\n            setFieldValue,\n            setValues,\n            setFieldTouched,\n            setTouched,\n            resetForm,\n            validate,\n            validateField,\n            resetField,\n            getValues,\n            getMeta,\n            getErrors,\n        });\n        return function renderForm() {\n            // avoid resolving the form component as itself\n            const tag = props.as === 'form' ? props.as : !props.as ? null : resolveDynamicComponent(props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (!tag) {\n                return children;\n            }\n            // Attributes to add on a native `form` tag\n            const formAttrs = tag === 'form'\n                ? {\n                    // Disables native validation as vee-validate will handle it.\n                    novalidate: true,\n                }\n                : {};\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\n        };\n    },\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n    const form = injectWithSelf(FormContextKey, undefined);\n    const fields = ref([]);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const noOp = () => { };\n    const noOpApi = {\n        fields,\n        remove: noOp,\n        push: noOp,\n        swap: noOp,\n        insert: noOp,\n        update: noOp,\n        replace: noOp,\n        prepend: noOp,\n        move: noOp,\n    };\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n        }\n        return noOpApi;\n    }\n    if (!unref(arrayPath)) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n        }\n        return noOpApi;\n    }\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n    if (alreadyExists) {\n        return alreadyExists;\n    }\n    let entryCounter = 0;\n    function getCurrentValues() {\n        return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    }\n    function initFields() {\n        const currentValues = getCurrentValues();\n        if (!Array.isArray(currentValues)) {\n            return;\n        }\n        fields.value = currentValues.map((v, idx) => createEntry(v, idx, fields.value));\n        updateEntryFlags();\n    }\n    initFields();\n    function updateEntryFlags() {\n        const fieldsLength = fields.value.length;\n        for (let i = 0; i < fieldsLength; i++) {\n            const entry = fields.value[i];\n            entry.isFirst = i === 0;\n            entry.isLast = i === fieldsLength - 1;\n        }\n    }\n    function createEntry(value, idx, currentFields) {\n        // Skips the work by returning the current entry if it already exists\n        // This should make the `key` prop stable and doesn't cause more re-renders than needed\n        // The value is computed and should update anyways\n        if (currentFields && !isNullOrUndefined(idx) && currentFields[idx]) {\n            return currentFields[idx];\n        }\n        const key = entryCounter++;\n        const entry = {\n            key,\n            value: computedDeep({\n                get() {\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    return idx === -1 ? value : currentValues[idx];\n                },\n                set(value) {\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    if (idx === -1) {\n                        if ((process.env.NODE_ENV !== 'production')) {\n                            warn(`Attempting to update a non-existent array item`);\n                        }\n                        return;\n                    }\n                    update(idx, value);\n                },\n            }),\n            isFirst: false,\n            isLast: false,\n        };\n        return entry;\n    }\n    function afterMutation() {\n        updateEntryFlags();\n        // Should trigger a silent validation since a field may not do that #4096\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'silent' });\n    }\n    function remove(idx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!pathValue || !Array.isArray(pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        newValue.splice(idx, 1);\n        const fieldPath = pathName + `[${idx}]`;\n        form.markForUnmount(fieldPath);\n        form.unsetInitialValue(fieldPath);\n        setInPath(form.values, pathName, newValue);\n        fields.value.splice(idx, 1);\n        afterMutation();\n    }\n    function push(initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [...normalizedPathValue];\n        newValue.push(value);\n        form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        setInPath(form.values, pathName, newValue);\n        fields.value.push(createEntry(value));\n        afterMutation();\n    }\n    function swap(indexA, indexB) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        // the old switcheroo\n        const temp = newValue[indexA];\n        newValue[indexA] = newValue[indexB];\n        newValue[indexB] = temp;\n        const tempEntry = newFields[indexA];\n        newFields[indexA] = newFields[indexB];\n        newFields[indexB] = tempEntry;\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        updateEntryFlags();\n    }\n    function insert(idx, initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        newValue.splice(idx, 0, value);\n        newFields.splice(idx, 0, createEntry(value));\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    function replace(arr) {\n        const pathName = unref(arrayPath);\n        form.stageInitialValue(pathName, arr);\n        setInPath(form.values, pathName, arr);\n        initFields();\n        afterMutation();\n    }\n    function update(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n            return;\n        }\n        setInPath(form.values, `${pathName}[${idx}]`, value);\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\n    }\n    function prepend(initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [value, ...normalizedPathValue];\n        form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        setInPath(form.values, pathName, newValue);\n        fields.value.unshift(createEntry(value));\n        afterMutation();\n    }\n    function move(oldIdx, newIdx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n            return;\n        }\n        const newFields = [...fields.value];\n        const movedItem = newFields[oldIdx];\n        newFields.splice(oldIdx, 1);\n        newFields.splice(newIdx, 0, movedItem);\n        const movedValue = newValue[oldIdx];\n        newValue.splice(oldIdx, 1);\n        newValue.splice(newIdx, 0, movedValue);\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    const fieldArrayCtx = {\n        fields,\n        remove,\n        push,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move,\n    };\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\n    onBeforeUnmount(() => {\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n        if (idx >= 0) {\n            form.fieldArrays.splice(idx, 1);\n        }\n    });\n    // Makes sure to sync the form values with the array value if they go out of sync\n    // #4153\n    watch(getCurrentValues, formValues => {\n        const fieldsValues = fields.value.map(f => f.value);\n        // If form values are not the same as the current values then something overrode them.\n        if (!isEqual(formValues, fieldsValues)) {\n            initFields();\n        }\n    });\n    return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = /** #__PURE__ */ defineComponent({\n    name: 'FieldArray',\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\n        function slotProps() {\n            return {\n                fields: fields.value,\n                push,\n                remove,\n                swap,\n                insert,\n                update,\n                replace,\n                prepend,\n                move,\n            };\n        }\n        ctx.expose({\n            push,\n            remove,\n            swap,\n            insert,\n            update,\n            replace,\n            prepend,\n            move,\n        });\n        return () => {\n            const children = normalizeChildren(undefined, ctx, slotProps);\n            return children;\n        };\n    },\n});\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = /** #__PURE__ */ defineComponent({\n    name: 'ErrorMessage',\n    props: {\n        as: {\n            type: String,\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const form = inject(FormContextKey, undefined);\n        const message = computed(() => {\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n        });\n        function slotProps() {\n            return {\n                message: message.value,\n            };\n        }\n        return () => {\n            // Renders nothing if there are no messages\n            if (!message.value) {\n                return undefined;\n            }\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\n            // If no tag was specified and there are children\n            // render the slot as is without wrapping it\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n                return children;\n            }\n            // If no children in slot\n            // render whatever specified and fallback to a <span> with the message in it's contents\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n                return h(tag || 'span', attrs, message.value);\n            }\n            return h(tag, attrs, children);\n        };\n    },\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return function resetForm(state) {\n        if (!form) {\n            return;\n        }\n        return form.resetForm(state);\n    };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.dirty : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.dirty)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.touched : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.touched)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.valid : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.valid)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is validating or not\n */\nfunction useIsValidating() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isValidating.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n    const form = injectWithSelf(FormContextKey);\n    const field = path ? undefined : inject(FieldContextKey);\n    return function validateField() {\n        if (field) {\n            return field.validate();\n        }\n        if (form && path) {\n            return form === null || form === void 0 ? void 0 : form.validateField(toValue(path));\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`field with name ${unref(path)} was not found`);\n        }\n        return Promise.resolve({\n            errors: [],\n            valid: true,\n        });\n    };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return function validateField() {\n        if (!form) {\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\n        }\n        return form.validate();\n    };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n    });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, toValue(path));\n        }\n        return toValue(field === null || field === void 0 ? void 0 : field.value);\n    });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\n    });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\n    });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return form === null || form === void 0 ? void 0 : form.errors.value[toValue(path)];\n        }\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n    });\n}\n\nfunction useSubmitForm(cb) {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\n    return function submitForm(e) {\n        if (!onSubmit) {\n            return;\n        }\n        return onSubmit(e);\n    };\n}\n\n/**\n * Sets a field's error message\n */\nfunction useSetFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldError(message) {\n        if (path && form) {\n            form.setFieldError(toValue(path), message);\n            return;\n        }\n        if (field) {\n            field.setErrors(message || []);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set error message since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets a field's touched meta state\n */\nfunction useSetFieldTouched(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldTouched(touched) {\n        if (path && form) {\n            form.setFieldTouched(toValue(path), touched);\n            return;\n        }\n        if (field) {\n            field.setTouched(touched);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched state since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets a field's value\n */\nfunction useSetFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldValue(value, shouldValidate = true) {\n        if (path && form) {\n            form.setFieldValue(toValue(path), value, shouldValidate);\n            return;\n        }\n        if (field) {\n            field.setValue(value, shouldValidate);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set value since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets multiple fields errors\n */\nfunction useSetFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormErrors(fields) {\n        if (form) {\n            form.setErrors(fields);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set errors because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormErrors;\n}\n\n/**\n * Sets multiple fields touched or all fields in the form\n */\nfunction useSetFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormTouched(fields) {\n        if (form) {\n            form.setTouched(fields);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched state because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormTouched;\n}\n\n/**\n * Sets multiple fields values\n */\nfunction useSetFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormValues(fields, shouldValidate = true) {\n        if (form) {\n            form.setValues(fields, shouldValidate);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set form values because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormValues;\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, normalizeRules, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useIsValidating, useResetForm, useSetFieldError, useSetFieldTouched, useSetFieldValue, useSetFormErrors, useSetFormTouched, useSetFormValues, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}